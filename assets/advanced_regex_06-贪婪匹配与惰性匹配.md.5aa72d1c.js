import{_ as e,o as a,c as r,b as t,d as n,e as o,a as s,r as d}from"./app.b322fe29.js";const p=JSON.parse('{"title":"6. 贪婪匹配与惰性匹配","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/regex/06-贪婪匹配与惰性匹配.md","lastUpdated":1663311966000}'),h={name:"advanced/regex/06-贪婪匹配与惰性匹配.md"},_=n("h1",{id:"_6-贪婪匹配与惰性匹配",tabindex:"-1"},[o("6. 贪婪匹配与惰性匹配 "),n("a",{class:"header-anchor",href:"#_6-贪婪匹配与惰性匹配","aria-hidden":"true"},"#")],-1),c=s('<p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p><pre>&quot;/(.*at)/&quot; =&gt; <a href="#learn-regex"><strong>The fat cat sat on the mat</strong></a>. </pre><p><a href="https://regex101.com/r/AyAdgJ/1" target="_blank" rel="noreferrer">在线练习</a></p><pre>&quot;/(.*?at)/&quot; =&gt; <a href="#learn-regex"><strong>The fat</strong></a> cat sat on the mat. </pre><p><a href="https://regex101.com/r/AyAdgJ/2" target="_blank" rel="noreferrer">在线练习</a></p>',5);const g=e(h,[["render",function(e,n,o,s,p,h){const g=d("VueJobs");return a(),r("div",null,[_,t(g),c])}]]);export{p as __pageData,g as default};
