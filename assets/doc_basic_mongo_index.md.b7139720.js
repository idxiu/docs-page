import{_ as s,o as a,c as l,b as e,d as n,e as o,a as t,r as p}from"./app.399c4537.js";const c=JSON.parse('{"title":"认识 MongoDB","description":"","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[{"level":3,"title":"什么是 MongoDB","slug":"什么是-mongodb","link":"#什么是-mongodb","children":[]},{"level":3,"title":"MongoDB 是免费的吗？","slug":"mongodb-是免费的吗？","link":"#mongodb-是免费的吗？","children":[]},{"level":3,"title":"主要特点","slug":"主要特点","link":"#主要特点","children":[]},{"level":3,"title":"MongoDB 与关系型数据库","slug":"mongodb-与关系型数据库","link":"#mongodb-与关系型数据库","children":[]}]},{"level":2,"title":"MongoDB 的优势及特点","slug":"mongodb-的优势及特点","link":"#mongodb-的优势及特点","children":[]},{"level":2,"title":"安装 MongoDB 官网","slug":"安装-mongodb-官网","link":"#安装-mongodb-官网","children":[{"level":3,"title":"使用 dockerfile 模式安装 mongo","slug":"使用-dockerfile-模式安装-mongo","link":"#使用-dockerfile-模式安装-mongo","children":[]},{"level":3,"title":"启动mongo服务","slug":"启动mongo服务","link":"#启动mongo服务","children":[]},{"level":3,"title":"查看运行进程","slug":"查看运行进程","link":"#查看运行进程","children":[]},{"level":3,"title":"配置开放端口","slug":"配置开放端口","link":"#配置开放端口","children":[]}]}],"relativePath":"doc/basic/mongo/index.md","lastUpdated":1663312337000}'),d={name:"doc/basic/mongo/index.md"},r=n("h1",{id:"认识-mongodb",tabindex:"-1"},[o("认识 MongoDB "),n("a",{class:"header-anchor",href:"#认识-mongodb","aria-hidden":"true"},"#")],-1),i=t('<h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-hidden="true">#</a></h2><h3 id="什么是-mongodb" tabindex="-1">什么是 MongoDB <a class="header-anchor" href="#什么是-mongodb" aria-hidden="true">#</a></h3><p>一个以 json 为数据模型的文档数据库；文档来自于 &quot;JSON Document&quot;，并非我们理解的 PDF、word 文档；类似于 Oracle、MySQL 海量数据处理，数据平台</p><h3 id="mongodb-是免费的吗？" tabindex="-1">MongoDB 是免费的吗？ <a class="header-anchor" href="#mongodb-是免费的吗？" aria-hidden="true">#</a></h3><ul><li>MongoDB 有两个发布版本：社区版和企业版</li><li>社区办基于 SSPL，一种和 AGPL 基本类似的开源协议</li><li>企业版是基于商业协议，需要付费使用</li></ul><h3 id="主要特点" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点" aria-hidden="true">#</a></h3><ul><li>建模为可选</li><li>JSON 数据模型比较适合开发</li><li>横向扩展可以支撑很大数据量和并发</li><li>易扩展、高性能、高可用</li><li>较容易映射复杂数据（key-value）</li><li>无事务特性要求（ACID 特性） <ul><li>A(Atomicity)： 原子性</li><li>C(Consistency)： 一致性</li><li>I(Isolation)： 独立性，也叫隔离性</li><li>D(Durability)：持久性</li></ul></li></ul><h3 id="mongodb-与关系型数据库" tabindex="-1">MongoDB 与关系型数据库 <a class="header-anchor" href="#mongodb-与关系型数据库" aria-hidden="true">#</a></h3><table><thead><tr><th></th><th>MongoDB</th><th>RDBMS</th></tr></thead><tbody><tr><td><strong><em>数据模型</em></strong></td><td>文档模型</td><td>关系模型</td></tr><tr><td><strong><em>数据库类型</em></strong></td><td>OLTP</td><td>OLTP</td></tr><tr><td><strong><em>CRUD 操作</em></strong></td><td>MQL/SQL</td><td>SQL</td></tr><tr><td><strong><em>高可用</em></strong></td><td>复制集</td><td>集群模式</td></tr><tr><td><strong><em>横向扩展</em></strong></td><td>通过原生分片完善支持</td><td>数据分区或者应用侵入式</td></tr><tr><td><strong><em>索引支持</em></strong></td><td>B-树、全文索引、地理位置索引、多键(multikey)索引、TTL 索引</td><td>B 树</td></tr><tr><td><strong><em>开发难度</em></strong></td><td>容易</td><td>困难</td></tr><tr><td><strong><em>数据容量</em></strong></td><td>理论上没有上限</td><td>千万、亿</td></tr><tr><td><strong><em>扩展方式</em></strong></td><td>垂直扩展 + 水平扩展</td><td>垂直扩展</td></tr></tbody></table><h2 id="mongodb-的优势及特点" tabindex="-1">MongoDB 的优势及特点 <a class="header-anchor" href="#mongodb-的优势及特点" aria-hidden="true">#</a></h2><ul><li>面向开发者的医用 + 高效数据库</li></ul><p><img src="/docs-page/assets/1616209245470-ff96a30f-5e85-4c2e-be81-a4eaccb87d39.ce35296a.png" alt="image.png"></p><ul><li><p>一目了然的对象模型</p><blockquote><p>文档模型与数据库中的文档一一对应</p></blockquote></li></ul><p><img src="/docs-page/assets/1616209303962-2bcb6794-2ce8-41ab-a93b-4ece07b2b620.d0cc6111.png" alt="image.png"></p><ul><li>灵活：快速响应业务变化 <ul><li>多形性：同一集合可以包含不同字段(类型)的文档对象</li><li>动态性：线上修改数据模式，修改时应用与数据库均无需下线</li><li>数据治理：支持使用 JSON Schema 来规范数据模式，在保障模式灵活动态的前提下，提供数据治理能力</li></ul></li></ul><p><img src="/docs-page/assets/1616209385224-53ab457b-5dc5-4981-b227-71024ecf19b9.24eb5a0a.png" alt="image.png"></p><ul><li>快速：最简单快速的开发方式；JSON 模型之快速特性： <ul><li>数据库引擎只需要在一个存储区读写</li><li>反范式、无关联的组织极大优化查询速度</li><li>程序 API 自然开发快速</li></ul></li></ul><p><img src="/docs-page/assets/1616209499188-822e92a3-ec8f-4391-8713-b84b7cc28234.9775cf8f.png" alt="image.png"></p><ul><li>原生的高可用和横向扩展能力 <ul><li>Replica Set-2 to 50 个成员</li><li>自恢复</li><li>多中心容灾能力</li><li>滚动服务 - 最小化服务终端</li></ul></li></ul><p><img src="/docs-page/assets/1616210262140-97cfc44e-e4e2-4e05-b4af-daab89cc325c.4904d47a.png" alt="image.png"></p><ul><li>横向扩展能力 <ul><li>需要的时候无缝扩展</li><li>应用全透明</li><li>多种数据分布策略</li><li>轻松支持 TB-PB 数量级</li></ul></li></ul><p><img src="/docs-page/assets/1616210618591-9736183e-cfae-4dc6-aa45-e266b3b3fda3.977aef26.png" alt="image.png"></p><h2 id="安装-mongodb-官网" tabindex="-1">安装 MongoDB <a href="https://www.mongodb.com/try" target="_blank" rel="noreferrer">官网</a> <a class="header-anchor" href="#安装-mongodb-官网" aria-hidden="true">#</a></h2><ul><li>打开<a href="https://hub.docker.com/_/mongo" target="_blank" rel="noreferrer">docker hub 官网</a>搜 mongodb</li></ul><h3 id="使用-dockerfile-模式安装-mongo" tabindex="-1">使用 dockerfile 模式安装 mongo <a class="header-anchor" href="#使用-dockerfile-模式安装-mongo" aria-hidden="true">#</a></h3><div class="language-yaml"><button class="copy"></button><span class="lang">yaml</span><pre><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">3.1</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mongo</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">image</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mongo</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">always</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MONGO_INITDB_ROOT_USERNAME</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">root</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">MONGO_INITDB_ROOT_PASSWORD</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">example</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ports</span><span style="color:#89DDFF;">:</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">27001:27017</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># 将MongoDB的默认端口映射到宿主机的27001端口上来</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># 数据持久化配置</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/mongotest:/data/db</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># 将容器内部的数据映射到宿主机的home文件夹的mongotest文件夹里</span></span>\n<span class="line"></span></code></pre></div><p>以我的的服务为例，在 home 文件夹下创建一个 mongotest 文件，然后在里面创建一个 docker-compose.yml，然后将上面的内容复制到 docker-compose.yml 文件中(当然也可以使用 ftp 工具上传)</p><p>我这儿就用 vim 编辑 docker-compose.yml 文件</p><div class="language-shell"><button class="copy"></button><span class="lang">shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">// 目录已经在/home/mongotest下</span></span>\n<span class="line"><span style="color:#A6ACCD;">$ vim docker-compose.yml</span></span>\n<span class="line"></span></code></pre></div><p>然后就将内容复制进去，按<code>ESC</code>，然后在分别按<code>:wq</code>回车</p><p><img src="/docs-page/assets/1616397704226-26e3dc2e-adf1-400e-98c7-2b681391e7e0.0031324f.png" alt="image.png"></p><h3 id="启动mongo服务" tabindex="-1">启动mongo服务 <a class="header-anchor" href="#启动mongo服务" aria-hidden="true">#</a></h3><p>现在就可以使用<code>docker-compose up -d</code>来启动 mongo 服务了，执行命令后 docker 就去拉去 mongo 镜像并创建 mongo 数据</p><p><img src="/docs-page/assets/1616398007645-53cbec32-9f5e-42de-8939-fe7f179c7a70.80449809.png" alt="image.png"></p><h3 id="查看运行进程" tabindex="-1">查看运行进程 <a class="header-anchor" href="#查看运行进程" aria-hidden="true">#</a></h3><p>可以使用<code>docker ps -a</code>或者<code>docker-compose</code>查看现在已启动的 docker 镜像</p><p><img src="/docs-page/assets/1616398249417-7ab747c1-d8a9-4f65-b928-2f05cffc91a4.ffe17e5d.png" alt="image.png"></p><h3 id="配置开放端口" tabindex="-1">配置开放端口 <a class="header-anchor" href="#配置开放端口" aria-hidden="true">#</a></h3><p>连接前一定要检查宿主机端口是否开放，centOS 可以使用<code>firewall-cmd --add-port=27017/tcp --permanent</code>命令添加端口，添加完成后，重启安全组，命令：<code>firewall-cmd --reload</code></p><p><img src="/docs-page/assets/1616400205315-d8549a68-8aca-477f-87b0-9a58d97b2c6d.9994e0fb.png" alt="image.png"></p><blockquote><p>如果在添加规则的时候出现如下报错的话，可有一下方案解决</p><p><img src="/docs-page/assets/1616399747519-6d4ce8c4-9b9f-4ecc-8a1f-0dad66980815.92f38991.png" alt="image.png"></p></blockquote><ul><li>检查服务器是否有安装<code>firewalld</code>，检查命令如下：</li></ul><div class="language-shell"><button class="copy"></button><span class="lang">shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ rpm -qa firwalld // 回车后如果没有打印出任何东西，则表明没有安装</span></span>\n<span class="line"></span></code></pre></div><ul><li>安装 firewalld 的命令：</li></ul><div class="language-shell"><button class="copy"></button><span class="lang">shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ yum install firewalld</span></span>\n<span class="line"></span></code></pre></div><p><img src="/docs-page/assets/1616400378025-fb0fc05a-3f84-4175-b500-372d69c47a41.7aef1cda.png" alt="image.png"></p>',46);const g=s(d,[["render",function(s,n,o,t,c,d){const g=p("VueJobs");return a(),l("div",null,[r,e(g),i])}]]);export{c as __pageData,g as default};
