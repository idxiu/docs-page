(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{551:function(t,_,e){"use strict";e.r(_);var v=e(8),r=Object(v.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_4-零宽度断言-前后预查"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-零宽度断言-前后预查"}},[t._v("#")]),t._v(" 4. 零宽度断言（前后预查）")]),t._v(" "),_("p",[t._v("先行断言和后发断言（合称 lookaround）都属于"),_("strong",[t._v("非捕获组")]),t._v("（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。")]),t._v(" "),_("p",[t._v("例如，我们希望从下面的输入字符串 "),_("code",[t._v("$4.44")]),t._v(" 和 "),_("code",[t._v("$10.88")]),t._v(" 中获得所有以 "),_("code",[t._v("$")]),t._v(" 字符开头的数字，我们将使用以下的正则表达式 "),_("code",[t._v("(?<=\\$)[0-9\\.]*")]),t._v("。意思是：获取所有包含 "),_("code",[t._v(".")]),t._v(" 并且前面是 "),_("code",[t._v("$")]),t._v(" 的数字。")]),t._v(" "),_("p",[t._v("零宽度断言如下：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("符号")]),t._v(" "),_("th",[t._v("描述")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("?=")]),t._v(" "),_("td",[t._v("正先行断言-存在")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("?!")]),t._v(" "),_("td",[t._v("负先行断言-排除")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("?<=")]),t._v(" "),_("td",[t._v("正后发断言-存在")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("?<!")]),t._v(" "),_("td",[t._v("负后发断言-排除")])])])]),t._v(" "),_("h3",{attrs:{id:"_4-1-正先行断言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-正先行断言"}},[t._v("#")]),t._v(" 4.1 "),_("code",[t._v("?=...")]),t._v(" 正先行断言")]),t._v(" "),_("p",[_("code",[t._v("?=...")]),t._v(" 正先行断言，表示第一部分表达式之后必须跟着 "),_("code",[t._v("?=...")]),t._v("定义的表达式。")]),t._v(" "),_("p",[t._v("返回结果只包含满足匹配条件的第一部分表达式。\n定义一个正先行断言要使用 "),_("code",[t._v("()")]),t._v("。在括号内部使用一个问号和等号： "),_("code",[t._v("(?=...)")]),t._v("。")]),t._v(" "),_("p",[t._v("正先行断言的内容写在括号中的等号后面。\n例如，表达式 "),_("code",[t._v("(T|t)he(?=\\sfat)")]),t._v(" 匹配 "),_("code",[t._v("The")]),t._v(" 和 "),_("code",[t._v("the")]),t._v("，在括号中我们又定义了正先行断言 "),_("code",[t._v("(?=\\sfat)")]),t._v(" ，即 "),_("code",[t._v("The")]),t._v(" 和 "),_("code",[t._v("the")]),t._v(" 后面紧跟着 "),_("code",[t._v("(空格)fat")]),t._v("。")]),t._v(" "),_("pre",[t._v('"(T|t)he(?=\\sfat)" => '),_("a",{attrs:{href:"#learn-regex"}},[_("strong",[t._v("The")])]),t._v(" fat cat sat on the mat.\n")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://regex101.com/r/IDDARt/1",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线练习"),_("OutboundLink")],1)]),t._v(" "),_("h3",{attrs:{id:"_4-2-负先行断言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-负先行断言"}},[t._v("#")]),t._v(" 4.2 "),_("code",[t._v("?!...")]),t._v(" 负先行断言")]),t._v(" "),_("p",[t._v("负先行断言 "),_("code",[t._v("?!")]),t._v(" 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。\n"),_("code",[t._v("正先行断言")]),t._v("  定义和 "),_("code",[t._v("负先行断言")]),t._v(" 一样，区别就是 "),_("code",[t._v("=")]),t._v(" 替换成 "),_("code",[t._v("!")]),t._v(" 也就是 "),_("code",[t._v("(?!...)")]),t._v("。")]),t._v(" "),_("p",[t._v("表达式 "),_("code",[t._v("(T|t)he(?!\\sfat)")]),t._v(" 匹配 "),_("code",[t._v("The")]),t._v(" 和 "),_("code",[t._v("the")]),t._v("，且其后不跟着 "),_("code",[t._v("(空格)fat")]),t._v("。")]),t._v(" "),_("pre",[t._v('"(T|t)he(?!\\sfat)" => The fat cat sat on '),_("a",{attrs:{href:"#learn-regex"}},[_("strong",[t._v("the")])]),t._v(" mat.\n")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://regex101.com/r/V32Npg/1",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线练习"),_("OutboundLink")],1)]),t._v(" "),_("h3",{attrs:{id:"_4-3-正后发断言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-正后发断言"}},[t._v("#")]),t._v(" 4.3 "),_("code",[t._v("?<= ...")]),t._v(" 正后发断言")]),t._v(" "),_("p",[t._v("正后发断言 记作"),_("code",[t._v("(?<=...)")]),t._v(" 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。\n例如，表达式 "),_("code",[t._v("(?<=(T|t)he\\s)(fat|mat)")]),t._v(" 匹配 "),_("code",[t._v("fat")]),t._v(" 和 "),_("code",[t._v("mat")]),t._v("，且其前跟着 "),_("code",[t._v("The")]),t._v(" 或 "),_("code",[t._v("the")]),t._v("。")]),t._v(" "),_("pre",[t._v('"(?<=(T|t)he\\s)(fat|mat)" => The '),_("a",{attrs:{href:"#learn-regex"}},[_("strong",[t._v("fat")])]),t._v(" cat sat on the "),_("a",{attrs:{href:"#learn-regex"}},[_("strong",[t._v("mat")])]),t._v(".\n")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://regex101.com/r/avH165/1",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线练习"),_("OutboundLink")],1)]),t._v(" "),_("h3",{attrs:{id:"_4-4-负后发断言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-负后发断言"}},[t._v("#")]),t._v(" 4.4 "),_("code",[t._v("?<!...")]),t._v(" 负后发断言")]),t._v(" "),_("p",[t._v("负后发断言 记作 "),_("code",[t._v("(?<!...)")]),t._v(" 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。\n例如，表达式 "),_("code",[t._v("(?<!(T|t)he\\s)(cat)")]),t._v(" 匹配 "),_("code",[t._v("cat")]),t._v("，且其前不跟着 "),_("code",[t._v("The")]),t._v(" 或 "),_("code",[t._v("the")]),t._v("。")]),t._v(" "),_("pre",[t._v('"(?<!(T|t)he\\s)(cat)" => The cat sat on '),_("a",{attrs:{href:"#learn-regex"}},[_("strong",[t._v("cat")])]),t._v(".\n")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://regex101.com/r/8Efx5G/1",target:"_blank",rel:"noopener noreferrer"}},[t._v("在线练习"),_("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=r.exports}}]);