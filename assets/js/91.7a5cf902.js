(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{817:function(t,r,e){"use strict";e.r(r);var n=e(45),o=Object(n.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[t._v('如果你严肃对待编程，就必定会使用"版本管理系统"（Version Control System）。 眼下最流行的"版本管理系统"，非Git莫属。')]),t._v(" "),e("p",[t._v('相比同类软件，Git有很多优点。其中很显著的一点，就是版本的分支（branch）和合并（merge）十分方便。有些传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称"快照"）的指针，因此非常快捷易用。 但是，太方便了也会产生副作用。如果你不加注意，很可能会留下一个枝节蔓生、四处开放的版本库，到处都是分支，完全看不出主干发展的脉络。')]),t._v(" "),e("p",[t._v("使用 git 作为代码版本管理工具，在使用之前需要先了解它是如何工作的，你可以参考这个"),e("a",{attrs:{href:"https://progit.bootcss.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("pro git"),e("OutboundLink")],1),t._v("文档。掌握一些基础的使用，例如代码提交，检出分支，代码合并是必要的，稍复杂的功能晚点你或许会感兴趣。")])])}),[],!1,null,null,null);r.default=o.exports}}]);