import{_ as e,o as a,c as r,b as d,d as o,e as s,a as n,r as p}from"./app.399c4537.js";const t=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"什么是正则表达式？","slug":"什么是正则表达式？","link":"#什么是正则表达式？","children":[]}],"relativePath":"advanced/regex/index.md","lastUpdated":1663312337000}'),c={name:"advanced/regex/index.md"},i=o("h1",{id:"正则表达式",tabindex:"-1"},[s("正则表达式 "),o("a",{class:"header-anchor",href:"#正则表达式","aria-hidden":"true"},"#")],-1),l=n('<blockquote><p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</p></blockquote><p>一个正则表达式是一种从左到右匹配主体字符串的模式。 “Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。 正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p><h2 id="什么是正则表达式？" tabindex="-1">什么是正则表达式？ <a class="header-anchor" href="#什么是正则表达式？" aria-hidden="true">#</a></h2><blockquote><p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</p></blockquote><p>一个正则表达式是一种从左到右匹配主体字符串的模式。 “Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。 正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p><p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。 我们使用以下正则表达式来验证一个用户名：</p><p><br><br></p><p align="center"><img src="/docs-page/assets/regexp-cn.96bd6de5.png" alt="Regular expression"></p><p>以上的正则表达式可以接受 <code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。 但不匹配<code>Jo</code>，因为它包含了大写的字母而且太短了。</p>',9);const h=e(c,[["render",function(e,o,s,n,t,c){const h=p("VueJobs");return a(),r("div",null,[i,d(h),l])}]]);export{t as __pageData,h as default};
