import{_ as e,o as s,c as a,b as n,d as p,e as l,a as o,r as c}from"./app.4b8e00fa.js";const r=JSON.parse('{"title":"Webpack导学","description":"","frontmatter":{},"headers":[{"level":2,"title":"主要内容","slug":"主要内容","link":"#主要内容","children":[]},{"level":2,"title":"官方资源","slug":"官方资源","link":"#官方资源","children":[]},{"level":2,"title":"常见的问题","slug":"常见的问题","link":"#常见的问题","children":[]},{"level":2,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[{"level":3,"title":"安装Node.js","slug":"安装node-js","link":"#安装node-js","children":[]},{"level":3,"title":"Node.js 包管理工具","slug":"node-js-包管理工具","link":"#node-js-包管理工具","children":[]},{"level":3,"title":"NPM 的常用命令","slug":"npm-的常用命令","link":"#npm-的常用命令","children":[]},{"level":3,"title":"NPM Scripts","slug":"npm-scripts","link":"#npm-scripts","children":[]},{"level":3,"title":"安装 Webpack-cli","slug":"安装-webpack-cli","link":"#安装-webpack-cli","children":[]}]}],"relativePath":"doc/devops/webpack/index.md","lastUpdated":1683631174000}'),t={name:"doc/devops/webpack/index.md"},d=p("h1",{id:"webpack导学",tabindex:"-1"},[l("Webpack导学 "),p("a",{class:"header-anchor",href:"#webpack导学","aria-hidden":"true"},"#")],-1),i=o('<ul><li><a href="#%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9">主要内容</a></li><li><a href="#%E5%AE%98%E6%96%B9%E8%B5%84%E6%BA%90">官方资源</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98">常见的问题</a></li><li><a href="#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87">环境准备</a><ul><li><a href="#%E5%AE%89%E8%A3%85node-js">安装Node.js</a></li><li><a href="#node-js-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7">Node.js 包管理工具</a></li><li><a href="#npm-%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">NPM 的常用命令</a></li><li><a href="#npm-scripts">NPM Scripts</a></li><li><a href="#%E5%AE%89%E8%A3%85-webpack-cli">安装 Webpack-cli</a></li></ul></li></ul><p>随着 Web 前端的不断发展，传统网页开发在逐渐往 Web 应用（Web Application，简称 WebAPP）的开发方式转变，页面开始变得越来越复杂，复杂的应用场景必然引起技术的进步，出现新的技术手段来解决现有问题。</p><p>前端模块化和工程化的呼声越来越高，随着前些年大行其道的 Grunt、Gulp、FIS（百度） 等构建工具的发展，带动了一波前端工程化热。</p><p>近几年，经过 React、Vue 库这些年的扩张，大型 Webapp 不再局限于手写 jQuery 操作 DOM，让大型 Webapp 有了全新的开发体验。在这个过程中，前端逐渐发展成了模块化和单页应用（single-page application，简称 SPA）为主的形式，在这种形态和 React、Vue 这些库的普及下，Webpack 越来越被更多成为主流构建工具。</p><p>Webpack 绝不仅仅是一个打包工具，系统的学习 Webpack 之后，我们可以基于 Webpack 做很多提升研发效率的事情。作为笔试必考、面试必问、工作必用的内容，Webpack 正变得越来越重要，尤其对于大型公司，会不会 Webpack 甚至能直接决定你是否被录用。</p><p><strong>除了Webpack还有Vite（Vue的作者尤雨溪开发的）、Rollup、Parcel，也是打包工具，只是它们的应用面不一样。</strong></p><h2 id="主要内容" tabindex="-1">主要内容 <a class="header-anchor" href="#主要内容" aria-hidden="true">#</a></h2><ul><li>Webpack 开发配置</li><li>Webpack 内核原理</li><li>工程化实践</li></ul><h2 id="官方资源" tabindex="-1">官方资源 <a class="header-anchor" href="#官方资源" aria-hidden="true">#</a></h2><p>英文文档：<a href="https://webpack.js.org/" target="_blank" rel="noreferrer">https://webpack.js.org/</a></p><p>中文文档：<a href="https://webpack.docschina.org/" target="_blank" rel="noreferrer">https://webpack.docschina.org/</a></p><h2 id="常见的问题" tabindex="-1">常见的问题 <a class="header-anchor" href="#常见的问题" aria-hidden="true">#</a></h2><ul><li>什么是模块化？ 模块化是指解决一个复杂问题时自顶向下逐层把系统划分成若干模块的过程，有多种属性，分别反映其内部特性。（百度百科） 前端模块化一般指得是 JavaScript 的模块，最常见的是 Nodejs 的 NPM 包，每个模块可能是最小甚至是最优的代码组合，也可能是解决某些问题有很多特定模块组成的大模块。 多模块化的规范：<code>CommonJS</code>、<code>AMD</code>和<code>ES6 Module</code>规范（另外还有<code>CMD</code>、<code>UMD</code>等）。</li><li>为什么是 Webpack？ Webpack 是一个现代 JavaScript 应用程序的静态模块打包器（static module bundler）</li><li>Webpack的工作流程是怎么样的？Webpack可以做什么？ <strong>webpack 是从入口文件开始，经过模块依赖加载、分析和打包三个流程完成项目的构建</strong> 。 Webpack 还可以轻松的解决传统构建工具解决的问题： <ul><li>模块化打包，一切皆模块，JS 是模块，CSS 等也是模块；</li><li>语法糖转换：比如 ES6 转 ES5、TypeScript；</li><li>预处理器编译：比如 Less、Sass 等；</li><li>项目优化：比如压缩、CDN；</li><li>解决方案封装：通过强大的 Loader 和插件机制，可以完成解决方案的封装，比如 PWA；</li><li>流程对接：比如测试流程、语法检测等。</li></ul></li><li>Webpack 中的概念有哪些？ 五大核心概念：入口、输出、插件、模块转化器、模式。</li></ul><h2 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-hidden="true">#</a></h2><h3 id="安装node-js" tabindex="-1">安装Node.js <a class="header-anchor" href="#安装node-js" aria-hidden="true">#</a></h3><p>首先进入 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noreferrer">Node.js 的官网</a>，选择对应系统的<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noreferrer">下载包</a>进行下载安装，对于 windows 用户，直接下载安装包安装即可，如果是 Macos 用户，推荐使用 <a href="https://brew.sh/index_zh-cn" target="_blank" rel="noreferrer">brew</a>进行安装。</p><p>Node.js 版本众多，包括稳定版和开发版，可能不同的项目需要的 Node.js 版本不同，这里我推荐大家安装 8.9 以上版本，对于已经安装了 Node.js 的朋友，可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noreferrer">nvm</a>（<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noreferrer">windows 版本</a>）对 Node.js 进行进行版本管理，（另外阿里有个 <a href="https://github.com/aliyun-node/tnvm" target="_blank" rel="noreferrer">tnvm</a>，也是管理 Node.js 版本的，增加了 alinode 版本系列的 Node.js）。</p><h3 id="node-js-包管理工具" tabindex="-1">Node.js 包管理工具 <a class="header-anchor" href="#node-js-包管理工具" aria-hidden="true">#</a></h3><p>Node.js 之所以这么流行，离不开庞大的社区建设，这里第一功劳就是 NPM 团队的贡献，使用 Node.js 写的代码，可以打包发布到 JavaScript 包管理平台 <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npmjs.com</a>（这个存放包的地方一般也被称为仓库）上，当我们项目需要使用某个包（模块）时，可以直接使用包管理工具来安装（下载）对应的包，我们也可以免费注册一个账号，发布自己的公共包和私有包供其他人使用。</p><p>NPM 是围绕着<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">语义版本控制（semver）</a>思想而设计的，我们在软件版本中碰见的：rc、<code>1.x.x</code>、<code>alpha</code>、<code>beta</code>等名词都可以在 <a href="http://semver.org/" target="_blank" rel="noreferrer">semver.org</a>得到解释介绍，简单来说规范是<code>主版本号.次版本号.修订号</code>（<code>MAJOR.MINOR.PATCH</code>）：</p><p>1.主版本号：当你做了不兼容的 API 修改； 2.次版本号：当你做了向下兼容的功能性新增； 3.修订号：当你做了向下兼容的问题修正；</p><p>例如：</p><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">demo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">webpack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^4.29.6</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><ul><li><code>name</code>：上面的代码就是表明了这个项目为<code>demo</code>，这样如果我们将来发布到 <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npmjs.com</a>会以这个来命名，除了这种方式的名称，还有一种命名的方式是<code>@scope/name</code>的方式，是<code>作用域包</code>，例如我们用来转化 ES6 语法的<code>@babel/core</code>就是<code>@babel</code>的作用域，详细介绍可以查看 <a href="https://www.npmjs.cn/misc/scope/" target="_blank" rel="noreferrer">package.json 的文档</a></li><li><code>dependencies</code>：是<code>demo</code>这个项目的依赖，就是 demo 这个包内离开<code>webpack</code>这个包就不能使用了，对应的还有<code>devdependencies</code>，开发以来，一般需要二次开发 demo 的时候需要安装的包，实际项目中，<code>webpack</code>是构建工具，代码不会直接用 webpack 的 API，而只在开发和打包的时候采用，所以正确做法是放在<code>devdependencies</code>中。</li></ul><p>注意到<code>dependencies</code> 中<code>webpack</code> 的后面版本号前面加了<code>^</code>，意思是主版本是<code>4</code>的最新版本，每次执行安装命令的时候，会更新符合这个规则的最新包，可以在<a href="https://www.npmjs.cn/misc/semver/#ranges" target="_blank" rel="noreferrer">npm semver range 部分</a>看到更详细的介绍。</p><h3 id="npm-的常用命令" tabindex="-1">NPM 的常用命令 <a class="header-anchor" href="#npm-的常用命令" aria-hidden="true">#</a></h3><p>下面介绍下 NPM 的常用命令：安装、删除、初始化、配置。</p><h4 id="安装和删除" tabindex="-1">安装和删除 <a class="header-anchor" href="#安装和删除" aria-hidden="true">#</a></h4><p>安装某个 NPM 包，使用命令：</p><div class="language-text"><button class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:#A6ACCD;">npm install packageName</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">// 简写 </span></span>\n<span class="line"><span style="color:#A6ACCD;">npm i packageName</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">// 安装特定版本</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm i packageName@x.x.x</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">// 删除某个 NPM 包</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm uninstall 包名</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">// dependencies</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm i packageName --save</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">// devdependencies</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm i packageName --save-dev</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">// 或者</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm i packageName -D</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果执行命令的目录下有<code>package.json</code>，则可以直接用<code>npm install</code>安装<code>package.json</code>中的所有依赖。</p><h4 id="本地模式和全局模式" tabindex="-1">本地模式和全局模式 <a class="header-anchor" href="#本地模式和全局模式" aria-hidden="true">#</a></h4><p>npm 的包安装，分为本地模式和全局模式，默认是本地模式，即在执行<code>npm install</code>命令的当前目录创建<code>node_modules</code>，然后下载安装包及其依赖到<code>node_modules</code>目录。</p><p>全局模式是指安装到全局路径的方式。在 Node.js 的 require 依赖之时，会优先查找自己当前文件的<code>node_modules</code>，如果没有，则循环遍历上层的<code>node_modules</code>，如果便历到根目录还找不到，则会使用全局模式安装的模块，另外全局模式安装的包可以指定全局命令，只需要在<code>package.json</code>增加<code>bin</code>字段并且指向包内对应的文件即可。全局安装一个包，使用命令<code>npm install --global</code>，<code>--global</code>可以简写为<code>-g</code>。</p><h4 id="初始化一个-npm-项目" tabindex="-1">初始化一个 NPM 项目 <a class="header-anchor" href="#初始化一个-npm-项目" aria-hidden="true">#</a></h4><p>npm init 用来初始化生成一个新的 package.json 文件。</p><p>输入<code>npm init</code>并且根据对应的提示回答问题，会向用户提问一系列问题。</p><p>如果你觉得不用修改默认配置，一路回车就可以了。</p><p><img src="https://b3logfile.com/file/2021/10/cc155445c9184d4d834bebc24d768916.png" alt="image-20210729201934539"></p><blockquote><p>如果使用了 <code>-f</code>（代表<code>force</code>）、<code>-y</code>（代表<code>yes</code>），则跳过提问阶段，直接生成一个新的 <code>package.json</code> 文件。</p></blockquote><h4 id="设置-npm-镜像" tabindex="-1">设置 NPM 镜像 <a class="header-anchor" href="#设置-npm-镜像" aria-hidden="true">#</a></h4><p>由于 NPM 网站经常不稳定，所以国内有很多镜像可以使用，<a href="https://npm.taobao.org/" target="_blank" rel="noreferrer">淘宝 NPM 镜像</a>是国内最大的一家 NPM 镜像网站，还有<code>cnpm</code>包可以替换官方 NPM 来使用，使用<code>cnpm</code>直接使用淘宝镜像安装 NPM 包。</p><p>单次使用镜像方法：</p><div class="language-shell"><button class="copy"></button><span class="lang">shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">npm </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">命令</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> --registry=https://registry.npm.taobao.org</span></span>\n<span class="line"></span></code></pre></div><p>设置默认 npm 使用淘宝镜像方法：</p><div class="language-shell"><button class="copy"></button><span class="lang">shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">npm config </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> registry https://registry.npm.taobao.org</span></span>\n<span class="line"></span></code></pre></div><p>使用下面的命令可以安装 cnpm 包，之后直接像使用 npm 一样使用 cnpm 即可，不需要添加<code>register</code></p><div class="language-shell"><button class="copy"></button><span class="lang">shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span>\n<span class="line"></span></code></pre></div><h4 id="npm-其他常用命令" tabindex="-1">NPM 其他常用命令 <a class="header-anchor" href="#npm-其他常用命令" aria-hidden="true">#</a></h4><ul><li>npm set：设置环境变量，例如：<code>npm set init-author-name &#39;Your name&#39;</code>，初始化的时候会使用默认环境变量；</li><li>npm info：查看某个包的信息，例如：<code>npm info lodash</code>；</li><li>npm search：查找 npm 仓库，后面可以跟字符串或者正则表达式，例如：<code>npm search webpack</code>；</li><li>npm list：树形的展现当前项目安装的所有模块，以及对应的依赖，例如：<code>npm list --global</code>查看全局安装的模块。</li></ul><blockquote><p>可以使用npm --help查看</p></blockquote><h3 id="npm-scripts" tabindex="-1">NPM Scripts <a class="header-anchor" href="#npm-scripts" aria-hidden="true">#</a></h3><p>NPM 不仅可以用于模块管理，还可以用于执行脚本。</p><p><code>package.json</code> 文件中可以添加 <code>scripts</code> 字段，用于指定脚本命令，供 NPM 直接调用。例如：</p><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#676E95;">// package.json</span></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webpack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node src/scripts/dev.js</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>在<code>package.json</code>添加上面字段之后，可以直接使用<code>npm run build</code>和<code>npm run start</code>命令了，实际上：</p><ul><li><code>npm run build</code>：相当于执行了当前项目中目录下的<code>webpack</code>命令；</li><li><code>npm run start</code>：相当于执行了<code>node src/scripts/dev.js</code>。</li></ul><p>另外<code>npm run start</code>还可以简写成<code>npm start</code>。</p><blockquote><p>Tips：除了 npm 外，还有一些包管理工具，主要是针对 npm 的下载速度慢、<code>node_modules</code> 混乱等缺点设计的，例如<a href="https://yarnpkg.com/" target="_blank" rel="noreferrer">yarn</a>和 <a href="https://pnpm.js.org/" target="_blank" rel="noreferrer">pnpm</a>。</p></blockquote><h3 id="安装-webpack-cli" tabindex="-1">安装 Webpack-cli <a class="header-anchor" href="#安装-webpack-cli" aria-hidden="true">#</a></h3><p><a href="https://github.com/webpack/webpack-cli" target="_blank" rel="noreferrer">Webpack-cli</a>是 Webpack 的 CLI （Command-line interface）工具，如果在项目中，我们可以使用下面的方式安装：</p><div class="language-text"><button class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:#A6ACCD;">npm install webpack-cli --save-dev</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果想全局使用<code>webpack</code>的命令，可以使用<code>npm install -g webpack-cli</code>安装。</p><blockquote><p>Tips：这里建议在项目中安装 webpack-cli 并且使用 <code>--save-dev</code> 的配置将 webpack-cli 放到开发依赖中。</p></blockquote><p>后面使用webpack可以有两种方式：</p><ul><li>配置scripts脚本<div class="language-text"><button class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:#A6ACCD;">&quot;build&quot;: &quot;webpack&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li>使用<code>npx</code>命令<div class="language-text"><button class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:#A6ACCD;">npx webpack</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li></ul>',66);const h=e(t,[["render",function(e,p,l,o,r,t){const h=c("VueJobs");return s(),a("div",null,[d,n(h),i])}]]);export{r as __pageData,h as default};
