import{_ as s,o as a,c as n,b as e,d as l,e as p,a as t,r as i}from"./app.399c4537.js";const c=JSON.parse('{"title":"git规范","description":"","frontmatter":{},"headers":[{"level":3,"title":"git 代理","slug":"git-代理","link":"#git-代理","children":[]},{"level":3,"title":"权限管理","slug":"权限管理","link":"#权限管理","children":[]},{"level":3,"title":"基本使用命令","slug":"基本使用命令","link":"#基本使用命令","children":[]},{"level":3,"title":"使用行为规范","slug":"使用行为规范","link":"#使用行为规范","children":[]},{"level":3,"title":"分支规范","slug":"分支规范","link":"#分支规范","children":[]},{"level":3,"title":"代码合并打tag","slug":"代码合并打tag","link":"#代码合并打tag","children":[]},{"level":3,"title":"提交PR","slug":"提交pr","link":"#提交pr","children":[]}],"relativePath":"git/03-git规范.md","lastUpdated":1663313048000}'),o={name:"git/03-git规范.md"},r=l("h1",{id:"git规范",tabindex:"-1"},[p("git规范 "),l("a",{class:"header-anchor",href:"#git规范","aria-hidden":"true"},"#")],-1),d=t('<h3 id="git-代理" tabindex="-1">git 代理 <a class="header-anchor" href="#git-代理" aria-hidden="true">#</a></h3><p>解决方法就是加速访问 github,本人使用蓝灯的全局代理功能</p><p><img src="/docs-page/assets/image-20220511161457299.c54bdab5.png" alt="image-20220511161457299"></p><p>再配置 git 代理</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git config --global http.proxy 127.0.0.1:51252</span></span>\n<span class="line"><span style="color:#A6ACCD;">git config --global https.proxy 127.0.0.1:51252</span></span>\n<span class="line"></span></code></pre></div><p>以上设置后就可以随意git 操作GitHub仓库了</p><p>撤销 git 代理</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git config --global --unset http.proxy</span></span>\n<span class="line"><span style="color:#A6ACCD;">git config --global --unset https.proxy</span></span>\n<span class="line"></span></code></pre></div><p>查看 git 配置</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git config --list</span></span>\n<span class="line"></span></code></pre></div><h3 id="权限管理" tabindex="-1">权限管理 <a class="header-anchor" href="#权限管理" aria-hidden="true">#</a></h3><p>GitLib有五种身份权限，分别是：</p><ul><li>Owner 项目所有者，拥有所有的操作权限</li><li>Master 项目的管理者，除更改、删除项目元信息外其它操作均可</li><li>Developer 项目的开发人员，做一些开发工作，对受保护内容无权限</li><li>Reporter 项目的报告者，只有项目的读权限，可以创建代码片断</li><li>Guest 项目的游客，只能提交问题和评论内容</li></ul><h3 id="基本使用命令" tabindex="-1">基本使用命令 <a class="header-anchor" href="#基本使用命令" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git branch  显示所有分支 </span></span>\n<span class="line"><span style="color:#A6ACCD;">git pull origin master  拉取远程主机master分支上的内容</span></span>\n<span class="line"><span style="color:#A6ACCD;">git push origin master 把本地内容推到远程主机master分支上</span></span>\n<span class="line"><span style="color:#A6ACCD;">git branch b1 从当前分支创建一个叫b1的分支 </span></span>\n<span class="line"><span style="color:#A6ACCD;">git checkout b1 切换到b1分支 </span></span>\n<span class="line"><span style="color:#A6ACCD;">git checkout -b b1 相当于以上两条命令的组合 </span></span>\n<span class="line"><span style="color:#A6ACCD;">git checkout master 切换到master主分支 </span></span>\n<span class="line"><span style="color:#A6ACCD;">git merge b1 把b1分支的代码合并到master上 </span></span>\n<span class="line"><span style="color:#A6ACCD;">git branch -d b1 删除b1分支，不能在被删除分支上执行</span></span>\n<span class="line"></span></code></pre></div><h3 id="使用行为规范" tabindex="-1">使用行为规范 <a class="header-anchor" href="#使用行为规范" aria-hidden="true">#</a></h3><ul><li>创建自己的分支，在自己的分支上进行开发</li><li>写好每次提交的 description 是个好习惯</li><li>需求完成或者 bug 修复后，利用自动化部署工具部署 dev 分支的代码到测试环境进行验证</li><li>自测通过后将分支合并到dev分支提交到远程主机</li></ul><h3 id="分支规范" tabindex="-1">分支规范 <a class="header-anchor" href="#分支规范" aria-hidden="true">#</a></h3><h4 id="主分支master" tabindex="-1">主分支Master <a class="header-anchor" href="#主分支master" aria-hidden="true">#</a></h4><p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。</p><p>Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p><h4 id="开发分支dev" tabindex="-1">开发分支Dev <a class="header-anchor" href="#开发分支dev" aria-hidden="true">#</a></h4><p>主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Dev。</p><p>这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在Master分支上，对Dev分支进行&quot;合并&quot;（merge）。</p><blockquote><p>Git创建Dev分支的命令：</p></blockquote><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git checkout -b dev master</span></span>\n<span class="line"></span></code></pre></div><blockquote><p>将Dev分支发布到Master分支的命令：</p></blockquote><ul><li>切换到Master分支</li></ul><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git checkout master</span></span>\n<span class="line"></span></code></pre></div><ul><li>对Dev分支进行合并</li></ul><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git merge --no-ff dev</span></span>\n<span class="line"></span></code></pre></div><p>这里稍微解释一下，上一条命令的--no-ff参数是什么意思。默认情况下，Git执行&quot;快进式合并&quot;（fast-farward merge），会直接将Master分支指向Dev分支。</p><p>使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。</p><h4 id="临时性分支" tabindex="-1">临时性分支 <a class="header-anchor" href="#临时性分支" aria-hidden="true">#</a></h4><p>前面讲到版本库的两条主要分支：Master和Dev。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。</p><p>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。 临时性分支主要有两种：</p><ul><li>开发功能（dev-*）分支</li><li>修补bug（fixbug）分支</li></ul><p>这两种分支都属于临时性需要，使用完合并以后，临时分支不要提交到远程代码库，使得远程代码库的常设分支始终只有Master和Dev。</p><h4 id="开发功能分支" tabindex="-1">开发功能分支 <a class="header-anchor" href="#开发功能分支" aria-hidden="true">#</a></h4><p>接下来，来看这两种&quot;临时性分支&quot;。 第一种是开发功能分支，它是为了开发人员独立开发不受其他干扰，从Dev分支上面分出来的。开发完成后，要再并入Dev。</p><blockquote><p>分支的名字，可以采用dev-*的形式命名。</p></blockquote><ul><li>创建一个分支：</li></ul><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git checkout -b dev-x dev</span></span>\n<span class="line"></span></code></pre></div><ul><li>开发完成后，将分支合并到dev分支：</li></ul><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git checkout dev</span></span>\n<span class="line"><span style="color:#A6ACCD;">git merge --no-ff dev-x</span></span>\n<span class="line"><span style="color:#A6ACCD;">git push origin dev</span></span>\n<span class="line"></span></code></pre></div><h4 id="修补bug分支" tabindex="-1">修补bug分支 <a class="header-anchor" href="#修补bug分支" aria-hidden="true">#</a></h4><p>后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。 修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Dev分支。它的命名，可以采用fixbug-*的形式。</p><ul><li>创建一个修补bug分支：</li></ul><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git checkout -b fixbug-0.1 master</span></span>\n<span class="line"></span></code></pre></div><ul><li>修补结束后，合并到master分支：</li></ul><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git checkout master</span></span>\n<span class="line"><span style="color:#A6ACCD;">git merge --no-ff fixbug-0.1</span></span>\n<span class="line"><span style="color:#A6ACCD;">git push origin master</span></span>\n<span class="line"></span></code></pre></div><ul><li>再合并到develop分支：</li></ul><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git checkout develop</span></span>\n<span class="line"><span style="color:#A6ACCD;">git merge --no-ff fixbug-0.1</span></span>\n<span class="line"><span style="color:#A6ACCD;">git push origin dev</span></span>\n<span class="line"></span></code></pre></div><h3 id="代码合并打tag" tabindex="-1">代码合并打tag <a class="header-anchor" href="#代码合并打tag" aria-hidden="true">#</a></h3><p>一个迭代上线并且线上回归结束后，我们通常要做两件事：</p><p>1、Developer提交Merge Requests，备注当前版本号，申请将该迭代分支合并到master分支</p><p>2、Master审核通过merge代码之后，对master分支打个标签，以便标识和快速退回到此版本；TAG版本号和应和项目版本号保持一致。例：<code>TAG-1.0.0</code> <code>TAG-1.0.1</code> ...</p><p>打tag可以通过git平台手动操作或通过以下命令行：</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git checkout master</span></span>\n<span class="line"><span style="color:#A6ACCD;">git tag -a 1.0.0</span></span>\n<span class="line"></span></code></pre></div><h3 id="提交pr" tabindex="-1">提交PR <a class="header-anchor" href="#提交pr" aria-hidden="true">#</a></h3><p>打开命令行，关联upstream原始仓库</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ git remote add upstream https://github.com/xxx/xxxA.git</span></span>\n<span class="line"></span></code></pre></div><p>内容创作完成后，执行下面的命令，</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#676E95;"># 全量提交</span></span>\n<span class="line"><span style="color:#A6ACCD;">$ git add </span><span style="color:#82AAFF;">.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;"># or 提交某个文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">$ git add 文件名</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;"># commit，添加commit信息</span></span>\n<span class="line"><span style="color:#A6ACCD;">$ git commit -m </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;"># push推送到fork远程仓库</span></span>\n<span class="line"><span style="color:#A6ACCD;">$ git push origin master</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;"># 保持同步原始仓库</span></span>\n<span class="line"><span style="color:#A6ACCD;">$ git fetch upstream</span></span>\n<span class="line"></span></code></pre></div><p>完成推送后，打开<code>Fork</code>到自己仓库GitHub地址，选择<code>Pull requests</code>，点击<code>New pull request</code></p><p><strong><img src="/docs-page/assets/image-20220511171942976.13d0cdce.png" alt="image-20220511171942976"></strong></p><p>按照规范填写title及备注信息，点击<code>Create pull request</code>即可完成提交</p><p><img src="/docs-page/assets/image-20220511172152175.243acaef.png" alt="image-20220511172152175"></p><p>最后等待审核者审核即可。</p>',69);const g=s(o,[["render",function(s,l,p,t,c,o){const g=i("VueJobs");return a(),n("div",null,[r,e(g),d])}]]);export{c as __pageData,g as default};
