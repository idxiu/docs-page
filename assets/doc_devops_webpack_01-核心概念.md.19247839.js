import{_ as s,o as n,c as a,b as o,d as p,e as l,a as e,r as c}from"./app.4b8e00fa.js";const t=JSON.parse('{"title":"核心概念","description":"","frontmatter":{},"headers":[{"level":2,"title":"HelloWorld","slug":"helloworld","link":"#helloworld","children":[]},{"level":2,"title":"CLI进阶","slug":"cli进阶","link":"#cli进阶","children":[]},{"level":2,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[]},{"level":2,"title":"核心概念","slug":"核心概念-1","link":"#核心概念-1","children":[]}],"relativePath":"doc/devops/webpack/01-核心概念.md","lastUpdated":1683631174000}'),r={name:"doc/devops/webpack/01-核心概念.md"},D=p("h1",{id:"核心概念",tabindex:"-1"},[l("核心概念 "),p("a",{class:"header-anchor",href:"#核心概念","aria-hidden":"true"},"#")],-1),d=e('<h2 id="helloworld" tabindex="-1">HelloWorld <a class="header-anchor" href="#helloworld" aria-hidden="true">#</a></h2><p>首先是创建项目，创建一个名字为<code>webpack-learn</code>的文件夹（这里千万别创建成<code>webpack</code>），并且进入文件夹使用<code>npm init</code>进行初始化：</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#676E95;"># 创建目录并且进入</span></span>\n<span class="line"><span style="color:#676E95;"># webpack-learn</span></span>\n<span class="line"><span style="color:#676E95;"># 初始化</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm init -y</span></span>\n<span class="line"><span style="color:#676E95;"># 安装 webpack 和 webpack-cli到开发依赖</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm i webpack@5 -D</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm i webpack-cli@4 -D</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;"># 注意这里安装的是webpack 5与webpack-cli 4的版本</span></span>\n<span class="line"></span></code></pre></div><p>创建目录src，其结构如下：</p><p><img src="https://b3logfile.com/file/2021/10/da4a65467db84657b8c15b5de6d42817.png" alt="image-20210729211229579"></p><p>创建<code>hello-world.js</code>文件：</p><div class="language-text"><button class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:#A6ACCD;">module.exports = &#39;hello world&#39;;</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>创建 <code>index.js</code>文件：</p><div class="language-text"><button class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:#A6ACCD;">const sayHello = require(&#39;./hello-world&#39;)</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">console.log(sayHello)</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>下面尝试一下webpack打包：</p><div class="language-text"><button class="copy"></button><span class="lang">text</span><pre><code><span class="line"><span style="color:#A6ACCD;">// 方法一</span></span>\n<span class="line"><span style="color:#A6ACCD;">npx webpack</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span>\n<span class="line"><span style="color:#A6ACCD;">// 方法二 scripts中添加 &quot;start&quot;: &quot;webpack&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm run start</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>说明：</p><ul><li><code>module.exports</code>与<code>require</code>是node.js所遵循的<code>Commonjs</code>规范；</li><li><code>module.exports</code>导出了一个字符串；</li><li><code>require</code>引用的如果是js文件，则可以省略；</li></ul><p>打包结果：</p><p><img src="https://b3logfile.com/file/2021/10/154303fac343439ab8c907d99f6f425c.png" alt="image-20210729211452723"></p><p>执行成功，index.js 文件被打包到了<code>dist</code>文件夹下了，同时提示我们默认使用了<code>production</code> mode，即生产环境，打开<code>dist/main.js</code>，里面的代码的确是被压缩的，说明是生产环境打包；</p><p>下面继续修改<code>package.json</code>添加<code>scripts</code>：</p><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webpack --mode development</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webpack --mode production</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p><img src="https://b3logfile.com/file/2021/10/d755457832014668be76264f5698beb0.png" alt="image-20210729212308012"></p><p>同样可以尝试<code>build</code>脚本，这里来说明一下这两个模式的内容，<strong>模式其实就是webpack内置了一些打包的参数。</strong></p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>development</code></td><td>会将 <code>DefinePlugin</code> 中 <code>p<wbr>rocess.env.NODE_ENV</code> 的值设置为 <code>development</code>. 为模块和 chunk 启用有效的名。</td></tr><tr><td><code>production</code></td><td>会将 <code>DefinePlugin</code> 中 <code>p<wbr>rocess.env.NODE_ENV</code> 的值设置为 <code>production</code>。为模块和 chunk 启用确定性的混淆名称，<code>FlagDependencyUsagePlugin</code>，<code>FlagIncludedChunksPlugin</code>，<code>ModuleConcatenationPlugin</code>，<code>NoEmitOnErrorsPlugin</code> 和 <code>TerserPlugin</code> 。</td></tr><tr><td><code>none</code></td><td>不使用任何默认优化选项</td></tr></tbody></table><p>如果没有设置，webpack 会给 <code>mode</code> 的默认值设置为 <code>production</code>。上面的内容，我们后续会介绍到！</p><h2 id="cli进阶" tabindex="-1">CLI进阶 <a class="header-anchor" href="#cli进阶" aria-hidden="true">#</a></h2><p>一般的CLI的命令都会有一个<code>help</code>命令：</p><div class="language-shell"><button class="copy"></button><span class="lang">shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">➜ npx webpack </span><span style="color:#82AAFF;">help</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Usage: webpack </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">entries...</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">Alternative usage to run commands: webpack </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">command</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">The build tool </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> modern web applications.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Options:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -c, --config </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value...</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">                Provide path to a webpack configuration file e.g. ./webpack.config.js.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --config-name </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value...</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">               Name of the configuration to use.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -m, --merge                            Merge two or more configurations using </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack-merge</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --env </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value...</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">                       Environment passed to the configuration when it is a function.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --node-env </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">                     Sets p<wbr>rocess.env.NODE_ENV to the specified value.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --progress </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">                     Print compilation progress during build.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -j, --json </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">                     Prints result as JSON or store it </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> a file.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -d, --devtool </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">                  Determine </span><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> maps to use.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --no-devtool                           Do not generate </span><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> maps.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --entry </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value...</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">                     The entry point</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> of your application e.g. ./src/main.js.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --mode </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">                         Defines the mode to pass to webpack.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --name </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">                         Name of the configuration. Used when loading multiple configurations.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -o, --output-path </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">              Output location of the file generated by webpack e.g. ./dist/.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --stats </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">                        It instructs webpack on how to treat the stats e.g. verbose.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --no-stats                             Disable stats output.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -t, --target </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">value...</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">                Sets the build target e.g. node.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --no-target                            Negative </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">target</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> option.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -w, --watch                            Watch </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> files changes.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --no-watch                             Do not watch </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> file changes.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --watch-options-stdin                  Stop watching when stdin stream has ended.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --no-watch-options-stdin               Do not stop watching when stdin stream has ended.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Global options:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --color                                Enable colors on console.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  --no-color                             Disable colors on console.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -v, --version                          Output the version number of </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack-cli</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> and </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack-dev-server</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> and commands.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  -h, --help </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">verbose</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">                   Display </span><span style="color:#82AAFF;">help</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> commands and options.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Commands:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  build</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">entries...</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  Run webpack </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">default command, can be omitted</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  configtest</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">t </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">config-path</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">             Validate a webpack configuration.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  help</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">h </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">command</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">option</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">              Display </span><span style="color:#82AAFF;">help</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> commands and options.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  info</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">                       Outputs information about your system.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  serve</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">server</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">entries...</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">            Run the webpack dev server. To see all available options you need to install </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack-dev-server</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  version</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">v </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">commands...</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">                Output the version number of </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack-cli</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> and </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack-dev-server</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> and commands.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  watch</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">w </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">entries...</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">         Run webpack and watch </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> files changes.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">To see list of all supported commands and options run </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpack --help=verbose</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Webpack documentation: https://webpack.js.org/.</span></span>\n<span class="line"><span style="color:#A6ACCD;">CLI documentation: https://webpack.js.org/api/cli/.</span></span>\n<span class="line"><span style="color:#A6ACCD;">Made with ♥ by the webpack team.</span></span>\n<span class="line"></span></code></pre></div><p>说明：</p><ul><li><code>--config</code>，<code>-c</code>：指定一个 Webpack 配置文件的路径；</li><li><code>--mode</code>：指定打包环境的 mode，取值为<code>development</code>和<code>production</code>，分别对应着开发环境和生产环境；</li><li><code>--json</code>：输mode出 Webpack 打包的结果，可以使用<code>webpack --json &gt; stats.json</code>方式将打包结果输出到指定的文件；</li><li><code>--progress</code>：显示 Webpack 打包进度；</li><li><code>--watch</code>, <code>-w</code>：watch 模式打包，监控文件变化之后重新开始打包；</li></ul><h2 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-hidden="true">#</a></h2><p>Webpack 是可配置的模块打包工具，我们可以通过修改 Webpack 的配置文件（<code>webpack.config.js</code>）来对 Webpack 进行配置，Webpack 的配置文件是遵循 Node.js 的 CommonJS 模块规范的，即：</p><ul><li>通过<code>require()</code>语法导入其他文件或者使用 Node.js 内置的模块</li><li>普通的 JavaScript 编写语法，包括变量、函数、表达式等</li></ul><p>说白了，<code>webpack.config.js</code>是一个 Node.js 的模块，简单的 webpack.config.js 示例</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/index.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">server.bundle.js</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">};</span></span>\n<span class="line"></span></code></pre></div><p>上面示例中，使用 CommonJS 的<code>require</code>引入 Node.js 内置的<code>path</code>模块，然后通过<code>module.exports</code>将 Webpack 的配置导出。</p><blockquote><p>Tips：Webpack 的配置是一个 Node.js 模块，所以并不只是 JSON 对象。</p></blockquote><p>默认情况下，Webpack 会查找执行目录下面的<code>webpack.config.js</code>作为配置，如果需要指定某个配置文件，可以使用下面的命令：</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">webpack -c webpack.config.js</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">// 或者 默认读取根目录中的 webpack.config.js文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">webpack</span></span>\n<span class="line"></span></code></pre></div><p>如果 Webpack 不是全局安装，则可以在项目目录下实行：</p><div class="language-sh"><button class="copy"></button><span class="lang">sh</span><pre><code><span class="line"><span style="color:#A6ACCD;">node ./node_modules/webpack/bin/webpack --config webpack.config.js</span></span>\n<span class="line"></span></code></pre></div><p>或者使用<code>npx</code></p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">npx webpack --config webpack.config.js</span></span>\n<span class="line"></span></code></pre></div><p>打包结果展示：</p><p><img src="/docs-page/assets/image-20210729224040426.aa7846c2.380026a2.png" alt="image-20210729224040426"></p><p>说明：为什么main.js还在dist，别急，后面会进行打包之后删除；</p><p>除了配置文件的语法多样之外，对于配置的类型也是多样的，最常见的是直接作为一个对象来使用，除了使用对象，Webpack 还支持函数、Promise 和多配置数组。</p><h2 id="核心概念-1" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念-1" aria-hidden="true">#</a></h2><p>讲完 Webpack 配置文件，下面讲下配置文件中的配置项：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>entry</code></td><td>入口起点(entry point) 指示 webpack 应该使用哪个模块，来作为构建其内部 <a href="https://webpack.docschina.org/concepts/dependency-graph/" target="_blank" rel="noreferrer">依赖图(dependency graph) <strong>(opens new window)</strong></a>的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</td></tr><tr><td><code>output</code></td><td>默认值是 <code>./src/index.js</code>output 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em> ，以及如何命名这些文件。</td></tr><tr><td><code>mode</code></td><td>通过选择 <code>development</code>, <code>production</code> 或 <code>none</code> 之中的一个，来设置 <code>mode</code> 参数，可以启用 webpack 内置在相应环境下的优化。其默认值为 <code>production</code>。</td></tr><tr><td><code>loader</code></td><td>模块转化器，模块的处理器，对模块进行转换处理；webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。<strong>loader</strong> 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 <a href="https://webpack.docschina.org/concepts/modules" target="_blank" rel="noreferrer">模块 <strong>(opens new window)</strong></a>，以供应用程序使用，以及被添加到依赖图中。</td></tr><tr><td><code>plugin</code></td><td>插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</td></tr></tbody></table><p>还有一些其他的概念：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>module</code></td><td>开发中每一个文件都可以看做 module，模块不局限于 js，也包含 css、图片等</td></tr><tr><td><code>chunk</code></td><td>代码块，一个 chunk 可以由多个模块组成</td></tr><tr><td><code>bundle</code></td><td>最终打包完成的文件，一般就是和 chunk 一一对应的关系，bundle 就是对 chunk 进行便意压缩打包等处理后的产出</td></tr></tbody></table><blockquote><p>Webpack 不仅仅支持 js 配置，还支持 ts（TypeScript）、CoffeeScript 甚至 <a href="https://reactjs.org/docs/introducing-jsx.html" target="_blank" rel="noreferrer">JSX <strong>(opens new window)</strong></a>语法的配置，不同语言其实核心配置项都不变，只不过语法不同而已 ——原因：是由于有很多不同的loaders！</p></blockquote>',50);const y=s(r,[["render",function(s,p,l,e,t,r){const y=c("VueJobs");return n(),a("div",null,[D,o(y),d])}]]);export{t as __pageData,y as default};
