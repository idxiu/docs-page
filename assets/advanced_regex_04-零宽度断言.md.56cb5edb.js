import{_ as e,o as t,c as d,b as o,d as a,e as r,a as c,r as n}from"./app.399c4537.js";const h=JSON.parse('{"title":"4. 零宽度断言（前后预查）","description":"","frontmatter":{},"headers":[{"level":3,"title":"4.1 ?=... 正先行断言","slug":"_4-1-正先行断言","link":"#_4-1-正先行断言","children":[]},{"level":3,"title":"4.2 ?!... 负先行断言","slug":"_4-2-负先行断言","link":"#_4-2-负先行断言","children":[]},{"level":3,"title":"4.3 ?<= ... 正后发断言","slug":"_4-3-正后发断言","link":"#_4-3-正后发断言","children":[]},{"level":3,"title":"4.4 ?<!... 负后发断言","slug":"_4-4-负后发断言","link":"#_4-4-负后发断言","children":[]}],"relativePath":"advanced/regex/04-零宽度断言.md","lastUpdated":1663313048000}'),l={name:"advanced/regex/04-零宽度断言.md"},s=a("h1",{id:"_4-零宽度断言（前后预查）",tabindex:"-1"},[r("4. 零宽度断言（前后预查） "),a("a",{class:"header-anchor",href:"#_4-零宽度断言（前后预查）","aria-hidden":"true"},"#")],-1),p=c('<p>先行断言和后发断言（合称 lookaround）都属于<strong>非捕获组</strong>（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p><p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和 <code>$10.88</code> 中获得所有以 <code>$</code> 字符开头的数字，我们将使用以下的正则表达式 <code>(?&lt;=\\$)[0-9\\.]*</code>。意思是：获取所有包含 <code>.</code> 并且前面是 <code>$</code> 的数字。</p><p>零宽度断言如下：</p><table><thead><tr><th style="text-align:center;">符号</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">?=</td><td>正先行断言-存在</td></tr><tr><td style="text-align:center;">?!</td><td>负先行断言-排除</td></tr><tr><td style="text-align:center;">?&lt;=</td><td>正后发断言-存在</td></tr><tr><td style="text-align:center;">?&lt;!</td><td>负后发断言-排除</td></tr></tbody></table><h3 id="_4-1-正先行断言" tabindex="-1">4.1 <code>?=...</code> 正先行断言 <a class="header-anchor" href="#_4-1-正先行断言" aria-hidden="true">#</a></h3><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p><p>返回结果只包含满足匹配条件的第一部分表达式。 定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p><p>正先行断言的内容写在括号中的等号后面。 例如，表达式 <code>(T|t)he(?=\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p><pre>&quot;(T|t)he(?=\\sfat)&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.\n</pre><p><a href="https://regex101.com/r/IDDARt/1" target="_blank" rel="noreferrer">在线练习</a></p><h3 id="_4-2-负先行断言" tabindex="-1">4.2 <code>?!...</code> 负先行断言 <a class="header-anchor" href="#_4-2-负先行断言" aria-hidden="true">#</a></h3><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。 <code>正先行断言</code> 定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p><p>表达式 <code>(T|t)he(?!\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p><pre>&quot;(T|t)he(?!\\sfat)&quot; =&gt; The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.\n</pre><p><a href="https://regex101.com/r/V32Npg/1" target="_blank" rel="noreferrer">在线练习</a></p><h3 id="_4-3-正后发断言" tabindex="-1">4.3 <code>?&lt;= ...</code> 正后发断言 <a class="header-anchor" href="#_4-3-正后发断言" aria-hidden="true">#</a></h3><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;=(T|t)he\\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p><pre>&quot;(?&lt;=(T|t)he\\s)(fat|mat)&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.\n</pre><p><a href="https://regex101.com/r/avH165/1" target="_blank" rel="noreferrer">在线练习</a></p><h3 id="_4-4-负后发断言" tabindex="-1">4.4 <code>?&lt;!...</code> 负后发断言 <a class="header-anchor" href="#_4-4-负后发断言" aria-hidden="true">#</a></h3><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;!(T|t)he\\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p><pre>&quot;(?&lt;!(T|t)he\\s)(cat)&quot; =&gt; The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.\n</pre><p><a href="https://regex101.com/r/8Efx5G/1" target="_blank" rel="noreferrer">在线练习</a></p>',23);const i=e(l,[["render",function(e,a,r,c,h,l){const i=n("VueJobs");return t(),d("div",null,[s,o(i),p])}]]);export{h as __pageData,i as default};
