import{_ as t,o as e,c as d,b as r,d as a,e as n,a as c,r as l}from"./app.399c4537.js";const s=JSON.parse('{"title":"3. 简写字符集","description":"","frontmatter":{},"headers":[],"relativePath":"advanced/regex/03-简写字符集.md","lastUpdated":1663312337000}'),o={name:"advanced/regex/03-简写字符集.md"},i=a("h1",{id:"_3-简写字符集",tabindex:"-1"},[n("3. 简写字符集 "),a("a",{class:"header-anchor",href:"#_3-简写字符集","aria-hidden":"true"},"#")],-1),x=c('<p>正则表达式提供一些常用的字符集简写。如下:</p><table><thead><tr><th style="text-align:center;">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center;">\\w</td><td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td style="text-align:center;">\\W</td><td>匹配所有非字母数字，即符号，等同于： <code>[^\\w]</code></td></tr><tr><td style="text-align:center;">\\d</td><td>匹配数字： <code>[0-9]</code></td></tr><tr><td style="text-align:center;">\\D</td><td>匹配非数字： <code>[^\\d]</code></td></tr><tr><td style="text-align:center;">\\s</td><td>匹配所有空格字符，等同于： <code>[\\t\\n\\f\\r\\p{Z}]</code></td></tr><tr><td style="text-align:center;">\\S</td><td>匹配所有非空格字符： <code>[^\\s]</code></td></tr><tr><td style="text-align:center;">\\f</td><td>匹配一个换页符</td></tr><tr><td style="text-align:center;">\\n</td><td>匹配一个换行符</td></tr><tr><td style="text-align:center;">\\r</td><td>匹配一个回车符</td></tr><tr><td style="text-align:center;">\\t</td><td>匹配一个制表符</td></tr><tr><td style="text-align:center;">\\v</td><td>匹配一个垂直制表符</td></tr><tr><td style="text-align:center;">\\p</td><td>匹配 CR/LF（等同于 <code>\\r\\n</code>），用来匹配 DOS 行终止符</td></tr></tbody></table>',2);const g=t(o,[["render",function(t,a,n,c,s,o){const g=l("VueJobs");return e(),d("div",null,[i,r(g),x])}]]);export{s as __pageData,g as default};
