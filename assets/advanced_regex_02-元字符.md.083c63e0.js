import{_ as e,o as r,c as t,b as a,d as o,e as d,a as n,r as c}from"./app.399c4537.js";const g=JSON.parse('{"title":"2. 元字符","description":"","frontmatter":{},"headers":[{"level":2,"title":"2.1 点运算符 .","slug":"_2-1-点运算符","link":"#_2-1-点运算符","children":[]},{"level":2,"title":"2.2 字符集","slug":"_2-2-字符集","link":"#_2-2-字符集","children":[{"level":3,"title":"2.2.1 否定字符集","slug":"_2-2-1-否定字符集","link":"#_2-2-1-否定字符集","children":[]}]},{"level":2,"title":"2.3 重复次数","slug":"_2-3-重复次数","link":"#_2-3-重复次数","children":[{"level":3,"title":"2.3.1 * 号","slug":"_2-3-1-号","link":"#_2-3-1-号","children":[]},{"level":3,"title":"2.3.2 + 号","slug":"_2-3-2-号","link":"#_2-3-2-号","children":[]},{"level":3,"title":"2.3.3 ? 号","slug":"_2-3-3-号","link":"#_2-3-3-号","children":[]}]},{"level":2,"title":"2.4 {} 号","slug":"_2-4-号","link":"#_2-4-号","children":[]},{"level":2,"title":"2.5 (...) 特征标群","slug":"_2-5-特征标群","link":"#_2-5-特征标群","children":[]},{"level":2,"title":"2.6 | 或运算符","slug":"_2-6-或运算符","link":"#_2-6-或运算符","children":[]},{"level":2,"title":"2.7 转码特殊字符","slug":"_2-7-转码特殊字符","link":"#_2-7-转码特殊字符","children":[]},{"level":2,"title":"2.8 锚点","slug":"_2-8-锚点","link":"#_2-8-锚点","children":[{"level":3,"title":"2.8.1 ^ 号","slug":"_2-8-1-号","link":"#_2-8-1-号","children":[]},{"level":3,"title":"2.8.2 $ 号","slug":"_2-8-2-号","link":"#_2-8-2-号","children":[]}]}],"relativePath":"advanced/regex/02-元字符.md","lastUpdated":1663313048000}'),h={name:"advanced/regex/02-元字符.md"},l=o("h1",{id:"_2-元字符",tabindex:"-1"},[d("2. 元字符 "),o("a",{class:"header-anchor",href:"#_2-元字符","aria-hidden":"true"},"#")],-1),s=n('<p>正则表达式主要依赖于元字符。 元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p><table><thead><tr><th style="text-align:center;">元字符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td>句号匹配任意单个字符除了换行符。</td></tr><tr><td style="text-align:center;">[ ]</td><td>字符种类。匹配方括号内的任意字符。</td></tr><tr><td style="text-align:center;">[^ ]</td><td>否定的字符种类。匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center;">*</td><td>匹配&gt;=0个重复的在*号之前的字符。</td></tr><tr><td style="text-align:center;">+</td><td>匹配&gt;=1个重复的+号前的字符。</td></tr><tr><td style="text-align:center;">?</td><td>标记?之前的字符为可选.</td></tr><tr><td style="text-align:center;"><code>{n,m}</code></td><td>匹配num个大括号之前的字符或字符集 (n &lt;= num &lt;= m).</td></tr><tr><td style="text-align:center;">(xyz)</td><td>字符集，匹配与 xyz 完全相等的字符串.</td></tr><tr><td style="text-align:center;">|</td><td>或运算符，匹配符号前或后的字符.</td></tr><tr><td style="text-align:center;">\\</td><td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) { } . * + ? ^ $ \\ |</code></td></tr><tr><td style="text-align:center;">^</td><td>从开始行开始匹配.</td></tr><tr><td style="text-align:center;">$</td><td>从末端开始匹配.</td></tr></tbody></table><h2 id="_2-1-点运算符" tabindex="-1">2.1 点运算符 <code>.</code> <a class="header-anchor" href="#_2-1-点运算符" aria-hidden="true">#</a></h2><p><code>.</code>是元字符中最简单的例子。 <code>.</code>匹配任意单个字符，但不匹配换行符。 例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。</p><pre>&quot;.ar&quot; =&gt; The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.\n</pre><p><a href="https://regex101.com/r/xc9GkU/1" target="_blank" rel="noreferrer">在线练习</a></p><h2 id="_2-2-字符集" tabindex="-1">2.2 字符集 <a class="header-anchor" href="#_2-2-字符集" aria-hidden="true">#</a></h2><p>字符集也叫做字符类。 方括号用来指定一个字符集。 在方括号中使用连字符来指定字符集的范围。 在方括号中的字符集不关心顺序。 例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>。</p><pre>&quot;[Tt]he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.\n</pre><p><a href="https://regex101.com/r/2ITLQ4/1" target="_blank" rel="noreferrer">在线练习</a></p><p>方括号的句号就表示句号。 表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p><pre>&quot;ar[.]&quot; =&gt; A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a>\n</pre><p><a href="https://regex101.com/r/wL3xtE/1" target="_blank" rel="noreferrer">在线练习</a></p><h3 id="_2-2-1-否定字符集" tabindex="-1">2.2.1 否定字符集 <a class="header-anchor" href="#_2-2-1-否定字符集" aria-hidden="true">#</a></h3><p>一般来说 <code>^</code> 表示一个字符串的开头，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。 例如，表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p><pre>&quot;[^c]ar&quot; =&gt; The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.\n</pre><p><a href="https://regex101.com/r/nNNlq3/1" target="_blank" rel="noreferrer">在线练习</a></p><h2 id="_2-3-重复次数" tabindex="-1">2.3 重复次数 <a class="header-anchor" href="#_2-3-重复次数" aria-hidden="true">#</a></h2><p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code> 的，用来指定匹配子模式的次数。 这些元字符在不同的情况下有着不同的意思。</p><h3 id="_2-3-1-号" tabindex="-1">2.3.1 <code>*</code> 号 <a class="header-anchor" href="#_2-3-1-号" aria-hidden="true">#</a></h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次。 例如，表达式 <code>a*</code> 匹配0或更多个以a开头的字符。表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串。</p><pre>&quot;[a-z]*&quot; =&gt; T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.\n</pre><p><a href="https://regex101.com/r/7m8me5/1" target="_blank" rel="noreferrer">在线练习</a></p><p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。 <code>*</code>和表示匹配空格的符号<code>\\s</code>连起来用，如表达式<code>\\s*cat\\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串。</p><pre>&quot;\\s*cat\\s*&quot; =&gt; The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the con<a href="#learn-regex"><strong>cat</strong></a>enation. \n</pre><p><a href="https://regex101.com/r/gGrwuz/1" target="_blank" rel="noreferrer">在线练习</a></p><h3 id="_2-3-2-号" tabindex="-1">2.3.2 <code>+</code> 号 <a class="header-anchor" href="#_2-3-2-号" aria-hidden="true">#</a></h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。 例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p><pre>&quot;c.+t&quot; =&gt; The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.\n</pre><p><a href="https://regex101.com/r/Dzf9Aa/1" target="_blank" rel="noreferrer">在线练习</a></p><h3 id="_2-3-3-号" tabindex="-1">2.3.3 <code>?</code> 号 <a class="header-anchor" href="#_2-3-3-号" aria-hidden="true">#</a></h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。 例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p><pre>&quot;[T]he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.\n</pre><p><a href="https://regex101.com/r/cIg9zm/1" target="_blank" rel="noreferrer">在线练习</a></p><pre>&quot;[T]?he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.\n</pre><p><a href="https://regex101.com/r/kPpO2x/1" target="_blank" rel="noreferrer">在线练习</a></p><h2 id="_2-4-号" tabindex="-1">2.4 <code>{}</code> 号 <a class="header-anchor" href="#_2-4-号" aria-hidden="true">#</a></h2><p>在正则表达式中 <code>{}</code> 是一个量词，常用来限定一个或一组字符可以重复出现的次数。 例如， 表达式 <code>[0-9]{2,3}</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p><pre>&quot;[0-9]{2,3}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.\n</pre><p><a href="https://regex101.com/r/juM86s/1" target="_blank" rel="noreferrer">在线练习</a></p><p>我们可以省略第二个参数。 例如，<code>[0-9]{2,}</code> 匹配至少两位 0~9 的数字。</p><pre>&quot;[0-9]{2,}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.\n</pre><p><a href="https://regex101.com/r/Gdy4w5/1" target="_blank" rel="noreferrer">在线练习</a></p><p>如果逗号也省略掉则表示重复固定的次数。 例如，<code>[0-9]{3}</code> 匹配3位数字</p><pre>&quot;[0-9]{3}&quot; =&gt; The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.\n</pre><p><a href="https://regex101.com/r/Sivu30/1" target="_blank" rel="noreferrer">在线练习</a></p><h2 id="_2-5-特征标群" tabindex="-1">2.5 <code>(...)</code> 特征标群 <a class="header-anchor" href="#_2-5-特征标群" aria-hidden="true">#</a></h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式。<code>(...)</code> 中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式 <code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code> 。再比如之前说的 <code>{}</code> 是用来表示前面一个字符出现指定次数。但如果在 <code>{}</code> 前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p><p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p><pre>&quot;(c|g|p)ar&quot; =&gt; The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.\n</pre><p><a href="https://regex101.com/r/tUxrBG/1" target="_blank" rel="noreferrer">在线练习</a></p><h2 id="_2-6-或运算符" tabindex="-1">2.6 <code>|</code> 或运算符 <a class="header-anchor" href="#_2-6-或运算符" aria-hidden="true">#</a></h2><p>或运算符就表示或，用作判断条件。</p><p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>。</p><pre>&quot;(T|t)he|car&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.\n</pre><p><a href="https://regex101.com/r/fBXyX0/1" target="_blank" rel="noreferrer">在线练习</a></p><h2 id="_2-7-转码特殊字符" tabindex="-1">2.7 转码特殊字符 <a class="header-anchor" href="#_2-7-转码特殊字符" aria-hidden="true">#</a></h2><p>反斜线 <code>\\</code> 在表达式中用于转码紧跟其后的字符。用于指定 <code>{ } [ ] / \\ + * . $ ^ | ?</code> 这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\\</code>。</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code> 则要写成 <code>\\.</code> 以下这个例子 <code>\\.?</code>是选择性匹配<code>.</code></p><pre>&quot;(f|c|m)at\\.?&quot; =&gt; The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>\n</pre><p><a href="https://regex101.com/r/DOc5Nu/1" target="_blank" rel="noreferrer">在线练习</a></p><h2 id="_2-8-锚点" tabindex="-1">2.8 锚点 <a class="header-anchor" href="#_2-8-锚点" aria-hidden="true">#</a></h2><p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code> 指定开头，<code>$</code> 指定结尾。</p><h3 id="_2-8-1-号" tabindex="-1">2.8.1 <code>^</code> 号 <a class="header-anchor" href="#_2-8-1-号" aria-hidden="true">#</a></h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p><p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>。但如果使用 <code>^b</code> 将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头。</p><p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串。</p><pre>&quot;(T|t)he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.\n</pre><p><a href="https://regex101.com/r/5ljjgB/1" target="_blank" rel="noreferrer">在线练习</a></p><pre>&quot;^(T|t)he&quot; =&gt; <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.\n</pre><p><a href="https://regex101.com/r/jXrKne/1" target="_blank" rel="noreferrer">在线练习</a></p><h3 id="_2-8-2-号" tabindex="-1">2.8.2 <code>$</code> 号 <a class="header-anchor" href="#_2-8-2-号" aria-hidden="true">#</a></h3><p>同理于 <code>^</code> 号，<code>$</code> 号用来匹配字符是否是最后一个。</p><p>例如，<code>(at\\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p><pre>&quot;(at\\.)&quot; =&gt; The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>\n</pre><p><a href="https://regex101.com/r/y4Au4D/1" target="_blank" rel="noreferrer">在线练习</a></p><pre>&quot;(at\\.)$&quot; =&gt; The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a>\n</pre><p><a href="https://regex101.com/r/t0AkOd/1" target="_blank" rel="noreferrer">在线练习</a></p>',78);const p=e(h,[["render",function(e,o,d,n,g,h){const p=c("VueJobs");return r(),t("div",null,[l,a(p),s])}]]);export{g as __pageData,p as default};
