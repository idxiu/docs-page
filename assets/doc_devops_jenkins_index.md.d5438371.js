import{_ as e,o as s,c as d,b as a,d as i,e as c,a as n,r as o}from"./app.399c4537.js";const t=JSON.parse('{"title":"Jenkins","description":"","frontmatter":{"sidebar":"auto"},"headers":[{"level":2,"title":"什么是CI/CD","slug":"什么是ci-cd","link":"#什么是ci-cd","children":[]},{"level":2,"title":"Jenkins 介绍","slug":"jenkins-介绍","link":"#jenkins-介绍","children":[]},{"level":2,"title":"安装Jenkins","slug":"安装jenkins","link":"#安装jenkins","children":[{"level":3,"title":"系统要求","slug":"系统要求","link":"#系统要求","children":[]},{"level":3,"title":"在Docker中下载并运行Jenkins","slug":"在docker中下载并运行jenkins","link":"#在docker中下载并运行jenkins","children":[]}]},{"level":2,"title":"插件下载","slug":"插件下载","link":"#插件下载","children":[{"level":3,"title":"配置国内加速源","slug":"配置国内加速源","link":"#配置国内加速源","children":[]},{"level":3,"title":"在线安装插件","slug":"在线安装插件","link":"#在线安装插件","children":[]},{"level":3,"title":"离线安装插件","slug":"离线安装插件","link":"#离线安装插件","children":[]}]},{"level":2,"title":"权限管理","slug":"权限管理","link":"#权限管理","children":[{"level":3,"title":"基于角色安全管理","slug":"基于角色安全管理","link":"#基于角色安全管理","children":[]},{"level":3,"title":"基于安全矩阵","slug":"基于安全矩阵","link":"#基于安全矩阵","children":[]}]},{"level":2,"title":"Gitee + Jenkins自动化实战","slug":"gitee-jenkins自动化实战","link":"#gitee-jenkins自动化实战","children":[{"level":3,"title":"创建git项目","slug":"创建git项目","link":"#创建git项目","children":[]},{"level":3,"title":"安装Jenkins插件","slug":"安装jenkins插件","link":"#安装jenkins插件","children":[]},{"level":3,"title":"新建构建任务","slug":"新建构建任务","link":"#新建构建任务","children":[]},{"level":3,"title":"Vue项目构建及部署","slug":"vue项目构建及部署","link":"#vue项目构建及部署","children":[]}]}],"relativePath":"doc/devops/jenkins/index.md","lastUpdated":1663313048000}'),l={name:"doc/devops/jenkins/index.md"},p=i("h1",{id:"jenkins",tabindex:"-1"},[c("Jenkins "),i("a",{class:"header-anchor",href:"#jenkins","aria-hidden":"true"},"#")],-1),r=n('<h2 id="什么是ci-cd" tabindex="-1">什么是CI/CD <a class="header-anchor" href="#什么是ci-cd" aria-hidden="true">#</a></h2><p><code>CI/CD</code>即持续集成(Continuous Integration)、持续交付(Continuous Delivery)和持续部署(Continuous Deployment)，是一种通过引入自动化构建部署来频繁向客户交付的方法。<code>CI/CD</code>是<code>DevOps</code>的基础核心，如果没有<code>CI/CD</code>自动化的工具和流程，<code>DevOps</code>是没有意义的，来看下图<code>DevOps</code>工作流程图：</p><p><img src="/docs-page/assets/20210308203919800.5e243908.png" alt=""></p><p>具体的流程为：</p><ul><li>先是计划<code>plan</code>，编码<code>code</code>，然后编译<code>build</code>，测试<code>test</code>（Dev）</li><li>然后发布<code>release</code>，部署<code>deploy</code>，运维<code>operate</code>，监控<code>monitor</code>（Ops）</li><li>然后发现问题或有新的需求，就重新计划plan...如此循环</li></ul><p>这就是完整的<code>DevOps</code>流程，试想如果没有自动化，那将是很繁重的任务。</p><p>与传统的项目部署相比，自动化流程的意义：</p><ul><li>减少人为失误，提高软件质量</li><li>效率迭代，便捷部署</li><li>快速交付，便于管理</li></ul><p><strong>主流的自动化软件对比</strong></p><img src="/docs-page/assets/2021031614533474.34a3e207.png" style="width:800px;"><p>从上图可以看出主要的软件有<code>Jenkins</code>,<code>Travis CI</code>,<code>Circle CI</code>, 后面两个是云平台，而且只支持公有<code>Public</code>项目，私有项目需要付费；<code>Jenkins</code>支持本地化部署，而且免费，可高度配置，是开源CI&amp;CD软件领导者， 提供超过1000个插件来支持构建、部署、自动化， 满足任何项目的需要。</p><h2 id="jenkins-介绍" tabindex="-1">Jenkins 介绍 <a class="header-anchor" href="#jenkins-介绍" aria-hidden="true">#</a></h2><p>官网：<a href="https://www.jenkins.io/" target="_blank" rel="noreferrer">https://www.jenkins.io/</a></p><p>Jenkins是一款开源 CI&amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件。<br> Jenkins 支持各种运行方式，可通过系统包、Docker 或者通过一个独立的 Java 程序。</p><p><strong>Jenkins &amp; Gitee 持续集成流程</strong></p><p><img src="/docs-page/assets/20210324230848552.96da6aed.png" alt=""></p><ul><li>在本地编辑器编辑代码，提交到<code>Gitee</code></li><li><code>git push</code> 操作触发 <code>Jenkins</code> 自动部署（<code>Jenkins</code> 安装在 <code>Docker</code> 中）</li><li><code>Jenkins</code> 开始构建、打包、最后部署到云服务器</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>除了Gitee，也可以使用GitLab,GitHub等代码仓库。</p></div><h2 id="安装jenkins" tabindex="-1">安装Jenkins <a class="header-anchor" href="#安装jenkins" aria-hidden="true">#</a></h2><p>本节的步骤适用于本地机器上的 <code>Jenkins</code> 新安装。</p><p><code>Jenkins</code> 通常作为一个独立的应用程序在其自己的流程中运行， 内置 <code>Java servlet</code> 容器/应用程序服务器（Jetty）。 <code>Jenkins</code> 也可以运行在不同的<code>Java servlet</code>容器(如Apache Tomcat 或 GlassFish)中作为servlet运行。</p><p>尽管此页面重点关注<code>Jenkins</code>的本地安装，但此内容也可用于帮助在生产环境中设置<code>Jenkins</code>。</p><h3 id="系统要求" tabindex="-1">系统要求 <a class="header-anchor" href="#系统要求" aria-hidden="true">#</a></h3><p>最低推荐配置:</p><ul><li>256MB可用内存</li><li>1GB可用磁盘空间(作为一个Docker容器运行jenkins的话推荐10GB)</li></ul><p>为小团队推荐的硬件配置:</p><ul><li>1GB+可用内存</li><li>50 GB+ 可用磁盘空间</li></ul><p>软件配置:</p><ul><li>Java 8—​无论是Java运行时环境（JRE）还是Java开发工具包（JDK）都可以。</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>将Jenkins作为Docker 容器运行，这不是必需的，也可以直接安装Jenkins。</p></div><h3 id="在docker中下载并运行jenkins" tabindex="-1">在Docker中下载并运行Jenkins <a class="header-anchor" href="#在docker中下载并运行jenkins" aria-hidden="true">#</a></h3><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ docker run --name jenkins_test -p 11005:8080 -p 50000:50000 jenkins/jenkins:lts</span></span>\n<span class="line"></span></code></pre></div><ul><li>--name 容器名称定义为jenkins_test</li><li>-p 将本地11005端口映射到Jenkins容器中的8080端口，这是访问Jenkins网页的端口</li><li>-p 50000端口映射是与Jenkins主服务器上通信的端口号</li></ul><p>上面没有挂载 <code>volume</code>, 如果有必要可以使用 <code>-v</code> 来映射容器内部文件：</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">-v jenkins-data:/var/jenkins_home</span></span>\n<span class="line"></span></code></pre></div><p>安装完成后这里提示有个初始密码，第一次登录需要用到，也可以在<code>/var/jenkins_home/secrets/initialAdminPassword</code>找到，通过 <code>docker ps | grep jenkins</code> 查看 Jenkins 是否已开启，如果没有开启可以使用 <code>docker start jenkins</code> 来开启。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>注意添加本地的端口(11005)到防火墙，还有注意云主机也开放了此端口，否则不能访问哦。</p></div><p>在浏览器访问11005端口开始使用 <code>Jenkins</code> ：</p><img src="/docs-page/assets/20210323231948966.65cd7388.png" alt="解锁Jenkins" style="width:800px;"><p>点击【继续】，然后开始安装插件：</p><img src="/docs-page/assets/20210323233652482.f25aab4f.png" alt="自定义Jenkins" style="width:800px;"><p>选择【安装推荐的插件】开始安装：</p><img src="/docs-page/assets/20210323233844979.3f27c0b2.png" alt="新手入门" style="width:800px;"><p>创建第一个管理员用户：</p><img src="/docs-page/assets/20210323234333756.edd5e1d7.png" alt="创建第一个管理员用户" style="width:800px;"><p>确认<code>Jenkins</code>访问路径：</p><img src="/docs-page/assets/20210323234459827.d67cc7e4.png" alt="实例配置" style="width:800px;"><p>安装完毕，开始使用：</p><img src="/docs-page/assets/20210323234535102.5fd87e48.png" alt="Jenkins已就绪" style="width:800px;"><p>首页欢迎界面：</p><img src="/docs-page/assets/20210323234642602.9c0c9407.png" alt="开始使用" style="width:800px;"><h2 id="插件下载" tabindex="-1">插件下载 <a class="header-anchor" href="#插件下载" aria-hidden="true">#</a></h2><p><code>Jenkins</code> 官方提供了大量的插件给用户下载，如Git相关插件可以连接代码仓库、SSH相关插件可以远程连接到服务器、NodeJS插件可以构建前端项目、权限管理插件可以方便管理多用户协作等，丰富的插件可以帮助我们更好的运行、管理我们的自动化流程。</p><h3 id="配置国内加速源" tabindex="-1">配置国内加速源 <a class="header-anchor" href="#配置国内加速源" aria-hidden="true">#</a></h3><p>在安装插件之前我们先配置下国内加速源，这样下载插件更快些。</p><p>首先打开<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noreferrer">清华大学开源软件镜像站</a>，搜索<code>jenkins</code>，选择 <code>update</code> 目录，复制该目录下的 <code>update-center.json</code> 的地址；</p><p>在<code>Jenkins</code>中打开Dashboard &gt; 插件管理[Plugin Manager] &gt; 高级[Advanced]：</p><img src="/docs-page/assets/20210324140129446.1a8aa6cd.png" alt="插件管理" style="width:900px;"><p>找到升级站点[Update Site]的位置，将刚才复制的清华源地址放进去，点击【提交】，那么后面更新插件都是从这个源下载安装，速度比较快。</p><p><img src="/docs-page/assets/20210324140211437.62445cc1.png" alt=""></p><h3 id="在线安装插件" tabindex="-1">在线安装插件 <a class="header-anchor" href="#在线安装插件" aria-hidden="true">#</a></h3><p>在同一个目录的[可选插件] 选项卡，可以搜索没有安装的插件，勾选后点击下面的按钮即可安装（已经安装的插件只在[已安装]的选项卡）：</p><img src="/docs-page/assets/20210324154028414.848bc39f.png" alt="插件管理" style="width:900px;"><h3 id="离线安装插件" tabindex="-1">离线安装插件 <a class="header-anchor" href="#离线安装插件" aria-hidden="true">#</a></h3><p>若是本地环境或内网环境也可以使用离线安装的方式，可以去<code>Jenkins</code>的官网下载插件：<a href="https://plugins.jenkins.io/" target="_blank" rel="noreferrer"></a></p><img src="/docs-page/assets/20210324140608399.3544da0c.png" alt="插件管理" style="width:900px;"><p>我们搜索一下 <code>Localization: Chinese</code> 然后就可以看到中文语言包：</p><img src="/docs-page/assets/20210324141203664.b0ddb098.png" alt="插件管理" style="width:900px;"><p>点击版本号就开始下载了，得到了 <code>localization-zh-cn.hpi</code> 文件，然后来安装：</p><p><img src="/docs-page/assets/20210324141425368.219064ae.png" alt=""></p><p>选择下载的文件，点击【上传】，安装完后，勾选【重启】，完事后就重新登录即可。</p><h2 id="权限管理" tabindex="-1">权限管理 <a class="header-anchor" href="#权限管理" aria-hidden="true">#</a></h2><p>权限管理的作用是给用户分配权限，方便多用户协作。首先我们来安装以下插件帮助我们管理安全配置：</p><ul><li>PAM Authentication plugin</li><li>Matrix Authorization Strategy Plugin</li><li>Role-based Authorization Strategy</li><li>LDAP Plugin</li></ul><p>安装完成重启Jenkins后生效。</p><h3 id="基于角色安全管理" tabindex="-1">基于角色安全管理 <a class="header-anchor" href="#基于角色安全管理" aria-hidden="true">#</a></h3><p>点击[系统管理] &gt; [安全] &gt; [全局安全配置] &gt; [授权策略]，选择 <code>Role-Based Strategy</code>，然后保存，再回退到[系统管理] &gt; [安全]，可以看到多出了一个菜单：</p><img src="/docs-page/assets/20210324155532109.1adacf52.png" alt="角色安全" style="width:900px;"><img src="/docs-page/assets/20210324155546563.0e66815c.png" alt="角色安全" style="width:900px;"><p><img src="/docs-page/assets/20210324155746639.cee1d60b.png" alt=""></p><h3 id="基于安全矩阵" tabindex="-1">基于安全矩阵 <a class="header-anchor" href="#基于安全矩阵" aria-hidden="true">#</a></h3><p>在[授权策略]中选择<code>安全矩阵</code>，这个是基于用户的权限配置，这里需要注意的是需要吧管理员添加进来，如果没有添加是没有权限做任何事的，切记！！！</p><p><img src="/docs-page/assets/20210324160013818.6f4e1b71.png" alt=""></p><h2 id="gitee-jenkins自动化实战" tabindex="-1">Gitee + Jenkins自动化实战 <a class="header-anchor" href="#gitee-jenkins自动化实战" aria-hidden="true">#</a></h2><p>当我们熟悉了<code>Jenkins</code> 的使用后，接下来我们来配置一个基于 <code>vue-element-admin</code> 的实战项目，来感受一下自动化流程带给我们的优势。</p><p>首先我们需要创建一个 <code>git</code> 项目，至于代码仓库可以自选，这里为了国内方便访问，我选择了 <code>Gitee</code> ，然后我们需要给 <code>Jenkins</code> 配置一些插件，比如 <code>NodeJS</code> 等，创建一个构建任务，关联 <code>git</code> 代码仓库，编写 <code>vue</code> 项目的编译打包脚本，再将打包后的产物部署到云服务器，这里演示的是阿里云的Nginx服务器。</p><h3 id="创建git项目" tabindex="-1">创建git项目 <a class="header-anchor" href="#创建git项目" aria-hidden="true">#</a></h3><p>这里以<code>Gitee</code>作为代码仓库，也可以使用<code>Github</code>/<code>Gitlab</code>等仓库。</p><p>假设创建的仓库地址是：<code>https://gitee.com/xxx/jenkins_test.git</code>（创建过程很简单，就不演示了）</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>Git 可以创建私有项目哦。</p></div><h3 id="安装jenkins插件" tabindex="-1">安装Jenkins插件 <a class="header-anchor" href="#安装jenkins插件" aria-hidden="true">#</a></h3><p><strong>安装Gitee插件</strong></p><p>因为这里使用了<code>Gitee</code>，我们需要在<code>Jenkins</code>中安装Gitee插件：</p><p><img src="/docs-page/assets/20210324164001297.7f00800a.png" alt=""></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>安装完记得重启Jenkins，否则新安装的插件不会显示哦。</p></div><p><strong>配置Gitee</strong></p><p>在[Jenkins] &gt; [系统管理] &gt; [系统配置] &gt; [Gitee配置] 配置 <code>Gitee</code> 信息：</p><p><img src="/docs-page/assets/20210324164650789.3f5795ba.png" alt=""></p><ul><li>链接名：输入Gitee或随便输入你想要的名称</li><li>Gitee域名URL：输入Gitee完整的URL地址 <code>https://gitee.com</code></li><li>证书令牌：如没有添加需要新建一个，点击添加（如下图）</li></ul><img src="/docs-page/assets/20210324170014881.de001305.png" alt="添加凭据" style="width:750px;"><ul><li>Domain：选择全局凭据</li><li>类型：选择Gitee API令牌</li><li>范围：选择全局</li><li>Gitee APIV5 私人令牌，<a href="https://gitee.com/profile/personal_access_tokens" target="_blank" rel="noreferrer">点击获取</a></li><li>ID 和 描述就随便写不一样的就行</li></ul><p>添加完令牌就直接选择就行，然后点击【测试链接】，如果出现<code>成功</code>则表示配置正确：</p><img src="/docs-page/assets/20210324170446534.c8465312.png" alt="添加凭据" style="width:900px;"><p><strong>安装NodeJS</strong></p><p>因为我们的Vue项目是基于 <code>NodeJS</code> 来打包构建的，所以需要在 <code>Jenkins</code> 中安装插件：</p><p><img src="/docs-page/assets/20210324203031178.d4441d1a.png" alt=""></p><p><strong>配置NodeJS</strong></p><p>在[系统管理] &gt; [系统配置] &gt; [全局工具配置] &gt; [NodeJS] 点击【NodeJS安装】：</p><img src="/docs-page/assets/20210420210529926.70f299a2.png" alt="NodeJS" style="width:900px;"><div class="warning custom-block"><p class="custom-block-title">注意</p><p><code>NodeJS</code> 版本不要选太高，选最新的LTS版本即可，否则可能因为版本不兼容导致构建失败，建议选择版本和本地开发的版本相同，这样就不会有问题了。</p></div><h3 id="新建构建任务" tabindex="-1">新建构建任务 <a class="header-anchor" href="#新建构建任务" aria-hidden="true">#</a></h3><p>在 <code>Jenkins</code> 首页点击【新建任务】开始第一个流水线的构建，选择<code>构建一个自由风格的软件项目</code> 点击保存即可创建构建项目：</p><img src="/docs-page/assets/20210324170835154.83813013.png" alt="NodeJS" style="width:800px;"><p>新建完成后进入配置，流水线会按照 [General] &gt; [源码管理] &gt; [构建触发器] &gt; [构建环境] &gt; [构建] &gt; [构建后操作]的步骤来执行自动化任务。</p><h4 id="general" tabindex="-1">General <a class="header-anchor" href="#general" aria-hidden="true">#</a></h4><img src="/docs-page/assets/20210324171712229.1e742dcf.png" alt="NodeJS" style="width:900px;"><h4 id="源码管理" tabindex="-1">源码管理 <a class="header-anchor" href="#源码管理" aria-hidden="true">#</a></h4><ul><li>选择 <code>Git</code> 选项</li><li>Repository URL: 创建的git项目地址</li><li>Credentials：点击添加一个凭据（注意 <code>Gitee API Token</code> 凭据不可用于源码管理的凭据，只用于<code>gitee</code>插件的 API 调用凭据）</li><li>点击【高级】 Advanced 按钮，Name输入<code>origin</code>，Refspec输入<code>+refs/heads/*:refs/remotes/origin/*</code></li><li>指定分支：<code>master</code></li></ul><img src="/docs-page/assets/20210324194748464.6d1390ef.png" alt="NodeJS" style="width:800px;"><h4 id="触发器配置" tabindex="-1">触发器配置 <a class="header-anchor" href="#触发器配置" aria-hidden="true">#</a></h4><p>这里选择配置 <code>push</code> 代码立即触发构建任务，勾选 <code>Gitee webhook触发构建</code>，后面有个地址这个后面需要配置到<code>Gitee</code>，<code>Gitee</code>触发构建策略勾选推送代码，其他先默认就行。</p><img src="/docs-page/assets/20210324193112270.8795a064.png" alt="触发构建" style="width:800px;"><p>后面有个 <code>Gitee WebHook密码</code> 栏位需要配置到Gitee，点击生成就会生成一个密码：</p><img src="/docs-page/assets/20210324193145702.bc932051.png" alt="触发构建" style="width:800px;"><p>打开 <code>Gitee</code> 项目的管理选项卡，左侧有个[WebHooks]菜单 ，点击【添加webHook】:</p><img src="/docs-page/assets/20210324193317281.f931f754.png" alt="触发构建" style="width:1000px;"><p>将上一步 <code>Jenkins</code> 生成的<code>URL</code>和<code>密码</code>填进去，点击【添加】：</p><p><img src="/docs-page/assets/20210324193430983.0bb72d57.png" alt=""></p><h4 id="构建环境" tabindex="-1">构建环境 <a class="header-anchor" href="#构建环境" aria-hidden="true">#</a></h4><p>修改构建任务的构建环境，勾选 <code>Provide Node &amp; npm bin/ folder to PATH</code> ，默认会选择<code>Jenkins</code>安装的<code>NodeJS</code>版本:</p><img src="/docs-page/assets/20210420221323687.2519922d.png" alt="构建环境" style="width:800px;"><h4 id="构建脚本" tabindex="-1">构建脚本 <a class="header-anchor" href="#构建脚本" aria-hidden="true">#</a></h4><p>选择【执行shell】：</p><p><img src="/docs-page/assets/20210324200306648.871c40c3.png" alt=""></p><p>先随便写一个shell脚本试试：</p><p><img src="/docs-page/assets/2021032420025598.8cf4baec.png" alt=""></p><p>保存后，触发一次提交，看看<code>控制台输出</code>：</p><p><img src="/docs-page/assets/20210324201532828.ba89d413.png" alt=""></p><h3 id="vue项目构建及部署" tabindex="-1">Vue项目构建及部署 <a class="header-anchor" href="#vue项目构建及部署" aria-hidden="true">#</a></h3><p>vue项目通过 <code>NodeJS</code> 构建后，需要将构建后的 <code>dist</code> 文件夹的内容部署到云服务器，因为 <code>Jenkins</code> 是 <code>Docker</code> 容器创建的，容器内部不能直接移动文件，因为没有挂载<code>volumn</code>，所以这里可以使用 <code>SSH</code> 的方式来传输容器的构建文件到<code>nginx</code>服务器。先来安装下<code>Publish over SSH</code>，进入插件管理：</p><p><img src="/docs-page/assets/20210325193332944.21e86c09.png" alt=""></p><p>安装完成后，在[系统管理] &gt; [系统配置] 会多出一个<code>Publish over SSH</code>:</p><p>在需要部署的目标云服务器生成密钥：</p><div class="language-bash"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ ssh-keygen -t rsa -C </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxxx@qq.com</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#676E95;"># 将公钥放到authorized_keys，否则SSH Server配置会不成功</span></span>\n<span class="line"><span style="color:#A6ACCD;">$ cat id_rsa.pub </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> authorized_keys</span></span>\n<span class="line"></span></code></pre></div><p>在 <code>Key</code> 栏位填写私钥：</p><p><img src="/docs-page/assets/20210406223639894.36a878e4.png" alt=""></p><p>设置 <code>SSH</code> 目标服务器的信息：</p><p><img src="/docs-page/assets/2021040623530727.faec4d5e.png" alt=""></p><p>点击 【Test Configuration】按钮，左侧显示 <code>Success</code> 即表示<code>SSH</code>可以连接成功。</p><p>[构建步骤]修改下 <code>shell</code> 脚本，进行 <code>vue</code> 的<code>安装</code>和<code>打包</code>：</p><p><img src="/docs-page/assets/2021040811374362.7991af64.png" alt=""></p><p>先添加一个<code>Transfer Set </code>删除部署目录的文件，假如 <code>nginx</code> 配置的 <code>root</code> 目录为<code>/usr/share/nginx/flower_html/</code>：</p><p><img src="/docs-page/assets/20210407153217299.76ead73d.png" alt=""></p><p>再加一个 <code>Transfer Set</code> 传送文件到部署目录：</p><p><img src="/docs-page/assets/20210407153314897.7749b570.png" alt=""></p><p>都设置好了，来触发一次构建，部署效果：</p><p><img src="/docs-page/assets/2021040811382869.7ab22413.png" alt=""></p><p>有了 <code>Jenkins</code> 自动化部署，以后我们只需要关注代码层面即可，修改完代码，提交到 <code>Git</code> 仓库，然后 <code>Jenkins</code> 会自动帮我们构建、打包、部署，是不是很方便呢。</p>',158);const g=e(l,[["render",function(e,i,c,n,t,l){const g=o("VueJobs");return s(),d("div",null,[p,a(g),r])}]]);export{t as __pageData,g as default};
