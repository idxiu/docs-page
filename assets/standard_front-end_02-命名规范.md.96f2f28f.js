import{_ as e,o as d,c as o,b as t,d as a,e as s,a as c,r as l}from"./app.b322fe29.js";const n=JSON.parse('{"title":"命名规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"整体规范","slug":"整体规范","link":"#整体规范","children":[]},{"level":2,"title":"命名严谨性","slug":"命名严谨性","link":"#命名严谨性","children":[]},{"level":2,"title":"项目命名","slug":"项目命名","link":"#项目命名","children":[]},{"level":2,"title":"目录（文件夹）命名","slug":"目录（文件夹）命名","link":"#目录（文件夹）命名","children":[]},{"level":2,"title":"文件命名","slug":"文件命名","link":"#文件命名","children":[]},{"level":2,"title":"组件命名","slug":"组件命名","link":"#组件命名","children":[]},{"level":2,"title":"css命名","slug":"css命名","link":"#css命名","children":[]},{"level":2,"title":"js命名","slug":"js命名","link":"#js命名","children":[]}],"relativePath":"standard/front-end/02-命名规范.md","lastUpdated":1663311966000}'),r={name:"standard/front-end/02-命名规范.md"},i=a("h1",{id:"命名规范",tabindex:"-1"},[s("命名规范 "),a("a",{class:"header-anchor",href:"#命名规范","aria-hidden":"true"},"#")],-1),p=c('<blockquote><p>规范的目的是为了编写高质量的代码，降低沟通成本，提高团队合作开发的效率，最终让大家每个人都可以写出一套漂亮整洁的代码。<a href="https://cn.vuejs.org/v2/style-guide" target="_blank" rel="noreferrer">参考官方文档</a></p></blockquote><div class="tip custom-block"><p class="custom-block-title">规范方式</p><ul><li>帕斯卡拼写法，英文为<code>PascalCase</code>，特点是所有连接单词的首字母大写，可以简称为大坨峰 <ul><li>骆驼拼写法，英文为<code>camelCase</code>，特点是第一个连接的单词的首字母小写，其余大写，可以简称为小坨峰；</li><li>短横拼写法，英文为<code>kebab-case</code>，特点是所有连接的单词以中划线（-）连接，可以简称为中划线。</li></ul></li><li>文件和文件夹中除<code>components</code>中组件文件夹要使用 大坨峰规则外，其他文件和文件夹都为中划线分隔。</li></ul></div><h2 id="整体规范" tabindex="-1">整体规范 <a class="header-anchor" href="#整体规范" aria-hidden="true">#</a></h2><p><strong>命名不可使用中文拼音</strong></p><p><strong>字母统一小写，专有名词可大写</strong></p><p><strong>共性在前，个性在后</strong></p><p><strong>语义要清楚完整，不要过分简写</strong></p><h2 id="命名严谨性" tabindex="-1">命名严谨性 <a class="header-anchor" href="#命名严谨性" aria-hidden="true">#</a></h2><blockquote><p>与后端命名统一。比如权限：后端<code>privilege</code>, 前端无论<code>router</code> , <code>store</code>, <code>api</code>等都必须使用<code>privilege</code>单词！</p></blockquote><p>文件和代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。 注：<code>beijing</code>、<code>henan</code>、<code>rmb</code> 等国际通用的名称，可视同英文。</p><h2 id="项目命名" tabindex="-1">项目命名 <a class="header-anchor" href="#项目命名" aria-hidden="true">#</a></h2><blockquote><p>字母组成，中划线拼接,全部采用小写方式，以中划线分隔。前面为项目英文名称，后面为项目的类型。尽量不要用<code>mall-management-system</code>，因为被后台占用。</p></blockquote><p>示例：<code>traffic-security-pc</code>、<code>travel-uni-app</code>、<code>mall-management-h5</code>、<code>mall-management-wx</code></p><h2 id="目录（文件夹）命名" tabindex="-1">目录（文件夹）命名 <a class="header-anchor" href="#目录（文件夹）命名" aria-hidden="true">#</a></h2><blockquote><p>文件夹代表着功能或者模块的名字，应该简洁明了。 除components组件目录，使用大坨峰命名， node_modules 依赖外,其余全部采用字母组成，中划线拼接。 有复数结构时，要采用复数命名法</p></blockquote><p>普通示例：</p><p><code>scripts/</code>、<code>styles/</code>、<code>images/</code>、<code>utils/</code>、<code>layouts</code>、<code>company-news/</code>、<code>img/</code>、<code>js/</code>、<code>doc/</code>、<code>api/</code>、<code>order/</code></p><p>特殊：</p><p><code>node_modules</code>示例：<code>node_modules/</code>、 <code>components</code>示例：<code>SvgIcon</code>、<code>Upload</code>、<code>TestUnit</code></p><h2 id="文件命名" tabindex="-1">文件命名 <a class="header-anchor" href="#文件命名" aria-hidden="true">#</a></h2><p>文件包括<code>.js</code> <code>.css</code> <code>.html</code> <code>.vue</code> <code>.sass</code> <code>.less</code> 图片等文件</p><blockquote><p>字母组成，中划线拼接</p></blockquote><p>例：<code>sass-index.scss</code> <code>dialog-user-info.vue</code></p><h2 id="组件命名" tabindex="-1">组件命名 <a class="header-anchor" href="#组件命名" aria-hidden="true">#</a></h2><blockquote><p>声明&amp;使用：首字母大写，驼峰拼接</p></blockquote><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;">// 声明</span></span>\n<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> DialogUserInfo form </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/components/dialog-user-info</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">components: </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">DialogUserInfo</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#676E95;">// 使用</span></span>\n<span class="line"><span style="color:#A6ACCD;">&lt;DialogUserInfo&gt;&lt;/DialogUserInfo&gt;</span></span>\n<span class="line"></span></code></pre></div><h2 id="css命名" tabindex="-1">css命名 <a class="header-anchor" href="#css命名" aria-hidden="true">#</a></h2><blockquote><p>字母组成，中划线拼接 id采用驼峰式命名</p></blockquote><p>例：<code>.color-white</code> <code>#theDialog</code></p><h2 id="js命名" tabindex="-1">js命名 <a class="header-anchor" href="#js命名" aria-hidden="true">#</a></h2><h4 id="变量-函数" tabindex="-1">变量&amp;函数 <a class="header-anchor" href="#变量-函数" aria-hidden="true">#</a></h4><blockquote><p>常量：大写字母、数字组成，下划线拼接，例：<code>CONSULT_TYPE</code> 私有变量：字母、数字组成，驼峰拼接，下划线开头，例：<code>_self</code> 普通变量：字母、数字组成，驼峰拼接，例：<code>idCard</code> 构造函数：字母组成，驼峰拼接，首字母大写，例：<code>Vue()</code> 普通函数：字母组成，驼峰拼接，动词+名词方式组合，例：<code>getList()</code></p></blockquote><h4 id="形参" tabindex="-1">形参 <a class="header-anchor" href="#形参" aria-hidden="true">#</a></h4><p>形参本身是可以任意定义的，统一是为了更方便地复用/合并代码</p><table><thead><tr><th>参数</th><th>含义</th><th>用法示例</th></tr></thead><tbody><tr><td>i</td><td>索引</td><td>switchTab(i) {}</td></tr><tr><td>e</td><td>事件</td><td>focusHandler(e) {}</td></tr><tr><td>v</td><td>基本类型值</td><td>setData(v) {}</td></tr><tr><td>obj</td><td>对象</td><td>let arr = mainList.filter(obj =&gt; obj.isCheck)</td></tr><tr><td>arr</td><td>数组</td><td>let arr = Array.from(obj)</td></tr><tr><td>fun</td><td>函数</td><td>callback(fun) {}</td></tr><tr><td>item</td><td>列表项</td><td>jumpDetail(item) {}</td></tr><tr><td>element</td><td>forEach的项</td><td>forEach(element=&gt;{})</td></tr><tr><td>key,value</td><td>键值对</td><td>for (let [key, value] of arr) {}</td></tr></tbody></table>',35);const h=e(r,[["render",function(e,a,s,c,n,r){const h=l("VueJobs");return d(),o("div",null,[i,t(h),p])}]]);export{n as __pageData,h as default};
